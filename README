Synopsis 0.3
~~~~~~~~~~~~

** Introduction

Synopsis is a code documentation tool. It extracts comments from a range of
input files and creates a range of output. Every input format has its own
Parser, whose output is an Abstract Syntax Tree as defined by Synopsis. This
AST is then Linked (to prevent duplicates, strip unneeded namespaces, etc) and
finally output. At any stage the AST can be saved to or loaded from files on
disk. Moreover, multiple files may be loaded at once to allow progressive
compilation using 'make'. Individual formatters take the AST from memory and
create suitable output.


** Building

* if the sources are checked out from cvs, run autoconf to generate the configure script
* run configure (with parameters, if appropriate)
* run make

** Installing

simply call 'make install' to install the synopsis tool together with the 
associated python package 'Synopsis'.

** Demos

There are demos for IDL, C++, and Python. Step into the demo subdirectory and run
make to build them.
For some of them you need particular tools, such as omniidl for the IDL parser, and
dot for the graph generator.

Parsers: IDL, C++, Python
Formatters:
 HTML - takes a directory name for output (-o Directory)
        Creates many pages in that directory
	Copies specified stylesheet to new directory
 HTML_Simple - one-page HTML output
 Dia - generates a Dia file with classes and generalizations
 Dot - generates various graphs, such as Inheritance
 ASCII - Tries to output the AST in a way that is syntactically valid as
         input.
 DUMP - Dumps the AST in a verbose form. This is useful only if you are
        trying to figure out how various input is converted to AST objects.
	Pipe into "less -r" for best results.

For an example of using synopsis for progressive compilation see the
RefManual in docs/. A separate AST is created for each input file, and only
updated when necessary. These separate files are then compiled into a single
AST and passed to the formatter for output:

 for each file:  synopsis -p C++ -Wp,-m -o syn/$file.syn $file.hh
 finally: synopis -f HTML -o Manual syn/*.syn

Note that telling the Parser to only keep main-file declarations (-m) results
in much smaller files and much faster linking, as the standard headers are so
large that they can cause huge time and memory requirements.


** Known Bugs

There are a few known bugs that are not yet fixed:
o. The HTML formatter doesn't sort the sections in class/module pages very
   well - currently it is alphabetical.


** Future features

Currently the following features are planned:
o. Precompiled headers. This would speed up the parsing and linking speed for
   C++ files tremendously
o. Further linker features and optimisations
o. Further output options, such as different formats (ps, pdf, latex, sgml,
   man, info).
o. Further output options, such as pluggable file layouts, only display public
   interfaces etc. These are mostly refactored into separate classes, there
   are just no alternatives written yet :)
o. Using the dictionary to parse and cross-reference all files in a project,
   similar to Mozilla's LXR but properly typed (LXR doesn't understand C/C++
   expressions properly, it just looks for names). The C++ parser already does
   a lot of what would be needed in terms of type lookup.

For more information on this TODO list, see the Task Manager at Synopsis'
Sourceforge home.


** More info

Synopsis is hosted at Sourceforge:

 Homepage:
 http://synopsis.sourceforge.net/
 
 Project page:
 http://sourceforge.net/projects/synopsis/

 Mailing list (see project page to subscribe and for archives):
 synopsis-devel@lists.sourceforge.net


** Epilogue

Synopsis is developed by:
 - Stefan Seefeld (seefeld@sympatico.ca)
 - Stephen Davies (chalky@null.net)

Synopsis is released under the GPL.

The C++ parser uses parts of OpenC++ by Shigeru Chiba, who owns copyright on
his source code. The relevant parts of OpenC++ are included for convenience.
