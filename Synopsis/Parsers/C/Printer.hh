//
// Copyright (C) 2004 Stefan Seefeld
// All rights reserved.
// Licensed to the public under the terms of the GNU LGPL (>= 2),
// see the file COPYING for details.
//

#ifndef _Printer_hh
#define _Printer_hh

#include "Visitor.hh"
#include "Expression.hh"
#include <iostream>

//. Printer (re)generates C source code
//. from the given syntax tree. If the syntax tree
//. was generated by the parser and not modified
//. afterwards, it should be equivalent to the original.

class Printer
{
public:
  Printer(std::ostream &os, size_t level) : my_os(os), my_level(level) {}
  Printer(Printer &p) : my_os(p.my_os), my_level(p.my_level) {}
  size_t indentation() const { return my_level;}
  void incr_indent() { ++my_level;}
  void decr_indent() { --my_level;}
  std::ostream &indent() { return my_os << std::string(my_level * 2, ' ');}
protected:
  std::ostream &my_os;
  size_t        my_level;
};

class TypeBasePrinter : public TypeVisitor, public Printer
{
public:
  TypeBasePrinter(std::ostream &os, size_t level) : Printer(os, level) {}
  virtual ~TypeBasePrinter() {}

  virtual void traverse_base(BaseType *);
  virtual void traverse_ptr(PtrType *);
  virtual void traverse_array(ArrayType *);
  virtual void traverse_bit_field(BitFieldType *);
  virtual void traverse_function(FunctionType *);
};

class TypeBeforePrinter : public TypeVisitor, public Printer
{
public:
  TypeBeforePrinter(std::ostream &os, size_t level,
		    const std::string &name) : Printer(os, level), my_name(name) {}
  virtual ~TypeBeforePrinter() {}

  virtual void traverse_base(BaseType *) { if (!my_name.empty()) my_os << my_name;}
  virtual void traverse_ptr(PtrType *);
  virtual void traverse_array(ArrayType *);
  virtual void traverse_bit_field(BitFieldType *);
  virtual void traverse_function(FunctionType *);
private:
  std::string my_name;
};

class TypeAfterPrinter : public TypeVisitor, public Printer
{
public:
  TypeAfterPrinter(std::ostream &os) : Printer(os, 0) {}
  virtual ~TypeAfterPrinter() {}

  virtual void traverse_base(BaseType *) {}
  virtual void traverse_ptr(PtrType *);
  virtual void traverse_array(ArrayType *);
  virtual void traverse_bit_field(BitFieldType *) {}
  virtual void traverse_function(FunctionType *);
};

class ExpressionPrinter : public ExpressionVisitor, public Printer
{
public:
  ExpressionPrinter(std::ostream &os) : Printer(os, 0) {}
  ExpressionPrinter(Printer &p) : Printer(p) {}
  virtual ~ExpressionPrinter() {}
  
  virtual void traverse_int(IntConstant *);
  virtual void traverse_uint(UIntConstant *);
  virtual void traverse_float(FloatConstant *);
  virtual void traverse_char(CharConstant *);
  virtual void traverse_string(StringConstant *);
  virtual void traverse_array(ArrayConstant *);
  virtual void traverse_enum(EnumConstant *);
  virtual void traverse_variable(Variable *);
  virtual void traverse_call(FunctionCall *);

  virtual void traverse_unary(UnaryExpr *);
  virtual void traverse_binary(BinaryExpr *);
  virtual void traverse_trinary(TrinaryExpr *);
  virtual void traverse_assign(AssignExpr *);
  virtual void traverse_rel(RelExpr *);
  virtual void traverse_cast(CastExpr *);
  virtual void traverse_sizeof(SizeofExpr *);
  virtual void traverse_index(IndexExpr *);

  void print_label(Label *);
  void print_decl(Decl *, bool show_base);
};

class StatementPrinter : public StatementVisitor, public Printer
{
public:
  StatementPrinter(std::ostream &os) : Printer(os, 0) {}
  StatementPrinter(Printer &p) : Printer(p) {}
  virtual ~StatementPrinter() {}
  
  virtual void traverse_statement(Statement *);
  virtual void traverse_file_line(FileLineStemnt *);
  virtual void traverse_include(InclStemnt *);
  virtual void traverse_end_include(EndInclStemnt *);
  virtual void traverse_expression(ExpressionStemnt *);
  virtual void traverse_if(IfStemnt *);
  virtual void traverse_switch(SwitchStemnt *);
  virtual void traverse_for(ForStemnt *);
  virtual void traverse_while(WhileStemnt *);
  virtual void traverse_do_while(DoWhileStemnt *);
  virtual void traverse_goto(GotoStemnt *);
  virtual void traverse_return(ReturnStemnt *);
  virtual void traverse_declaration(DeclStemnt *);
  virtual void traverse_typedef(TypedefStemnt *);
  virtual void traverse_block(Block *);
  virtual void traverse_function_definition(FunctionDef *);

  void print_file(File *);
private:
  void block(Statement *);
};

// private:
//   void indent() { for(int i = 0; i != level; ++i) out << "  ";}
//   void incr_indent() { ++level;}
//   void decr_indent() { --level;}
//   void null() { indent(); out << ";\n";}
//   void meta_char(char, bool);
//   void meta_string(const std::string &);
//   void rel_op(RelOp op);
//   void binary_op(BinaryOp op);
//   void unary_op(UnaryOp op);
//   void assign_op(AssignOp op);
//   std::ostream &out;
//   bool          debug;
//   int           level;
//   bool          show_base;
// };

#endif
