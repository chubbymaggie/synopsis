/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/synopsis/Synopsis/Synopsis/Parsers/C/ctool/src/ctool/lexer.cpp,v 1.1 2001/08/08 08:41:29 flisakow Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 207
#define YY_END_OF_BUFFER 208
static yyconst short int yy_accept[603] =
    {   0,
        0,    0,    0,    0,    0,    0,  177,  177,    0,    0,
        0,    0,  148,  148,   44,   44,    0,    0,  208,  206,
      204,  205,  205,  106,    4,  152,  100,  110,    2,  129,
      130,   98,   96,  140,   97,  135,   99,  154,  154,  138,
      139,  121,  126,  123,  137,  143,  152,  131,  132,  112,
      152,  142,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  133,  111,  134,
      109,  204,  147,  207,  151,  150,  207,  177,  178,  177,
      184,  207,  207,  207,  190,  202,  207,  176,  162,  161,
      207,  148,   44,   43,   45,   54,   55,  207,  207,  207,

      207,  207,  207,  207,  204,  125,  152,  105,  107,  113,
      103,  127,  101,  128,  102,  136,    0,  158,    1,    0,
      104,  157,  153,  154,    0,  154,  154,    0,  116,  122,
      120,  124,  117,    5,    3,  115,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   28,  152,  152,  152,  152,
      152,  152,   33,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  114,  108,  204,  147,  147,  144,
      146,    0,  151,  149,  177,  178,  184,  185,  184,  186,
      179,  182,  183,  181,  180,    0,  201,    0,    0,  201,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  176,    0,  160,  175,  174,  163,  165,  172,  169,
      173,  170,  166,  168,  167,  171,  175,  148,   44,   43,
       54,    0,    0,    0,    0,    0,    0,    0,  141,    0,
      158,    0,    6,  156,    0,  157,  153,  153,    0,  159,
      154,  154,  155,  118,  119,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,   40,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,   31,  152,
      152,   18,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,    0,  203,  200,
      199,  187,    0,    0,  189,  197,  194,  198,  195,  191,

      193,  192,  196,    0,  163,  165,  164,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      158,    0,    7,    0,  156,    0,  157,  153,  153,  159,
      155,  155,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,    8,
      152,   25,   16,  152,  152,  152,  152,   29,   30,  152,
      152,   32,  152,   19,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   15,  152,  152,    0,  187,
        0,  189,  188,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   59,    0,    0,    0,  156,  155,  155,  152,

       41,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,   24,   13,  152,
      152,  152,  152,   20,  152,  152,  152,   17,  152,  152,
      152,  152,  152,  152,  152,   38,  152,  152,   39,  145,
        0,    0,    0,    0,    0,    0,    0,   62,    0,    0,
        0,  152,  152,  152,  152,  152,  152,  152,  152,   84,
      152,  152,  152,   86,  152,  152,  152,  152,  152,  152,
      152,   21,    9,   77,  152,   34,   22,   35,   11,   36,
       37,  152,   74,  152,  152,  145,    0,    0,    0,   60,
        0,    0,    0,   56,    0,   51,  152,   42,  152,   93,

      152,   68,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,   81,  152,   27,  152,   12,  152,  152,
        0,   63,    0,    0,    0,    0,   48,    0,  152,  152,
      152,  152,  152,  152,   85,   78,  152,  152,   87,   70,
      152,   75,  152,   26,   10,   23,   14,    0,    0,   57,
       61,    0,   52,   65,   82,  152,   88,   69,  152,  152,
      152,  152,   92,  152,   94,  152,  152,   49,   64,    0,
        0,    0,  152,  152,  152,  152,   95,   79,   90,   71,
       76,   72,    0,   58,   66,   53,   83,   46,   89,  152,
      152,  152,   50,    0,  152,  152,   91,   73,   67,   47,

       80,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   31,   31,   31,   32,   33,
        9,    9,    9,    9,    9,   34,    9,    9,    9,    9,
        9,    9,    9,    9,   35,    9,    9,   36,    9,    9,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,

       47,   48,   49,   50,   51,    9,   52,   53,   54,   55,
       56,   57,    9,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    1,    2,    1,    1,    3,    1,    4,    1,
        1,    5,    6,    6,    7,    1,    1,    1,    1,    7,
        8,    8,    8,    1,    1,    1,    1,    1,    1,    1,
        8,    8,    8,    4,    4,    4,    1,    9,    1,    1,
        4,    1,    8,    8,    8,    8,    8,    8,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[628] =
    {   0,
        0,   68,    0,    0,   68,   69,   70,   73,   75,   77,
       76,   87,  961,  960,   82,   84,   79,   96,  963,  966,
      959,  966,  966,  934,  966,    0,  933,   73,  966,  966,
      966,  932,   85,  966,  101,  124,   90,  135,  140,  966,
      966,   76,  931,  103,  966,  966,  109,  966,  966,  930,
      915,  966,   79,  897,   92,  108,  113,   70,  898,  125,
      897,  905,  134,  886,  895,  893,  898,  966,  122,  966,
      966,  157,  188,  966,    0,  966,  943,  942,  966,  941,
      185,  191,  940,  931,  930,  929,  238,    0,  966,  210,
      299,    0,    0,    0,  966,  937,  966,  898,  885,  881,

      880,  879,  878,  890,  929,  966,    0,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  912,  198,  966,  915,
      966,  201,  244,  291,  252,  117,  145,    0,  902,  966,
      966,  966,  901,  966,  966,  966,  317,  876,  872,  865,
      877,  864,  879,  866,  872,  858,  859,  856,  856,  859,
      856,  853,    0,  123,  857,  158,  855,  137,  182,  859,
      852,  157,  151,  857,  966,  966,  235,  286,  313,  966,
      966,  856,    0,  966,  902,  966,  224,  966,  232,  966,
      966,  966,  966,  966,  966,  893,  966,  892,  891,  890,
      306,  328,  889,  888,  887,  886,  885,  884,  883,  882,

      881,    0,  378,  966,  966,  966,  234,  309,  966,  966,
      966,  966,  966,  966,  966,  966,    0,    0,    0,    0,
      889,  341,  840,  835,  831,  842,  829,  841,  966,  351,
      966,  881,  966,  369,  388,  966,  192,  224,  391,  397,
      966,  966,  373,  966,  966,  235,  216,  820,  840,  333,
      839,  834,  220,  815,  823,  829,    0,  821,  833,  828,
      816,  224,  830,  828,  824,  816,  822,  825,    0,  811,
      815,    0,  816,  813,  802,  804,  806,  813,  799,  797,
      797,  809,  799,  803,  807,  809,  798,  795,  966,  966,
      966,  966,  415,  420,  966,  966,  966,  966,  966,  966,

      966,  966,  966,  837,  402,  425,    0,  795,  791,  790,
      789,  788,  800,  793,  782,  786,  792,  791,  785,  430,
      433,  832,  966,  441,  966,  447,  450,  966,  966,  966,
      276,  253,  784,  780,  773,  785,  301,  771,  771,  786,
      775,  780,  782,  782,  775,  777,  765,  768,  765,    0,
      767,    0,    0,  758,  766,  755,  762,    0,    0,  756,
      753,    0,  757,    0,  752,  752,  749,  761,  751,  755,
      760,  759,  302,  748,  753,    0,  741,  753,  752,  966,
      453,  966,  966,  747,  742,  738,  749,  736,  748,  737,
      731,  747,  966,  729,  741,  456,  466,  966,  966,  738,

      745,  727,  739,  726,  723,  734,  720,  730,  727,  719,
      729,  722,  719,  728,  725,  728,  714,    0,    0,  714,
      715,  720,  711,    0,  718,  704,  708,    0,  716,  713,
      715,  699,  708,  710,  708,    0,  700,  703,    0,  750,
      703,  692,  696,  702,  701,  695,  699,  966,  685,  683,
      697,  687,  700,  689,  686,  685,  677,  681,  690,  693,
      678,  689,  678,  689,  682,  685,  671,  666,  677,  663,
      663,    0,    0,    0,  675,    0,    0,    0,    0,    0,
        0,  673,    0,  673,  666,  715,  662,  656,  672,  673,
      643,  655,  642,  966,  621,  966,  610,    0,  606,    0,

      602,  561,  530,  543,  544,  537,  458,  476,  475,  469,
      460,  464,  460,    0,  463,    0,  451,    0,  462,  460,
      459,  464,  444,  461,  440,  451,  966,  441,  447,  433,
      429,  451,  440,  437,    0,  444,  426,  439,    0,  420,
      407,  417,  396,    0,    0,    0,    0,  398,  399,  398,
      966,  377,  392,  966,  388,  368,  380,    0,  359,  352,
      359,  341,    0,  356,    0,  353,  331,  330,  966,  312,
      290,  300,  292,  277,  278,  260,    0,    0,  263,    0,
        0,  260,  258,  966,  251,  966,    0,  228,    0,  223,
      196,  188,  966,  185,  140,   77,    0,    0,  966,    0,

        0,  966,  519,  528,  537,  546,  555,  564,  573,  579,
      587,  595,  603,  611,  620,  629,  638,  647,  655,  664,
      673,  682,  691,   96,  696,   78,  704
    } ;

static yyconst short int yy_def[628] =
    {   0,
      602,    1,  603,  603,  604,  604,  605,  605,  606,  606,
      607,  607,  608,  608,  609,  609,  603,  603,  602,  602,
      602,  602,  602,  602,  602,  610,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  610,  602,  602,  602,
      610,  602,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  602,  602,  602,
      602,  602,  602,  602,  611,  602,  602,  612,  602,  612,
      613,  614,  615,  616,  602,  616,  617,  618,  602,  602,
      619,  620,  621,  622,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  602,  602,  602,  610,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  623,
      602,  602,  602,  602,  602,  602,  602,  624,  602,  602,
      602,  602,  602,  602,  602,  602,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  602,  602,  602,  602,  602,  602,
      602,  602,  611,  602,  612,  602,  613,  602,  613,  602,
      602,  602,  602,  602,  602,  616,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      625,  618,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  626,  620,  621,  622,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  627,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  624,  602,  602,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  625,  602,  602,  626,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  627,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  610,  610,  610,  610,

      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      602,  602,  602,  602,  602,  602,  602,  602,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  602,  602,  602,
      602,  602,  602,  602,  610,  610,  610,  610,  610,  610,
      610,  610,  610,  610,  610,  610,  610,  602,  602,  602,
      602,  602,  610,  610,  610,  610,  610,  610,  610,  610,
      610,  610,  602,  602,  602,  602,  610,  610,  610,  610,
      610,  610,  602,  602,  610,  610,  610,  610,  602,  610,

      610,    0,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602
    } ;

static yyconst short int yy_nxt[1037] =
    {   0,
       20,   20,   21,   22,   23,   24,   25,   20,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   39,   40,   41,   42,   43,   44,   45,   46,
       26,   26,   26,   47,   26,   26,   48,   20,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   26,
       60,   26,   61,   26,   26,   26,   26,   62,   63,   64,
       65,   66,   67,   26,   26,   26,   68,   69,   70,   71,
       72,   76,   76,   79,   80,   73,   79,   80,   85,   89,
       85,   96,   90,  109,   81,  307,   86,   81,   86,   82,
       89,   97,   82,   90,   94,   95,   94,   95,   96,  110,

      112,  129,  130,  243,  119,   77,   77,   83,   97,  120,
       83,  113,   87,   91,   87,  134,  121,  601,  114,   98,
      135,   99,  150,  100,   91,  151,  101,  115,  116,  132,
      133,  138,  102,  103,  142,  104,   98,  139,   99,  140,
      100,  143,  117,  101,  118,  118,  118,  144,  165,  102,
      103,  241,  104,  122,  145,  123,  123,  124,  122,  167,
      124,  124,  124,  146,  168,  147,  125,  148,  126,  127,
      128,  125,  153,  126,  127,  271,  149,  241,  242,  154,
      600,  125,  272,  157,  158,  277,  125,  126,  178,  166,
      169,  170,  126,  159,  182,  127,  160,  242,  128,  179,

      127,  285,  278,  286,  180,  183,  274,  283,  171,  171,
      171,  203,  203,  203,  203,  284,  204,  275,  118,  118,
      118,  234,  234,  234,  279,  599,  328,  178,  598,  230,
      231,  231,  235,  236,  236,  178,  597,  167,  602,  280,
      172,  189,  168,  602,  230,  231,  179,  235,  236,  190,
      231,  180,  328,  236,  305,  305,  306,  329,  191,  191,
      192,  336,  122,  596,  123,  123,  124,  239,  595,  239,
      345,  337,  240,  240,  240,  125,  329,  237,  238,  346,
      193,  194,  354,  355,  195,  196,  399,  333,  169,  170,
      125,  594,  197,  334,  335,  198,  237,  199,  593,  200,

      592,  201,  206,  591,  238,  399,  171,  171,  171,  122,
      398,  124,  124,  124,  590,  169,  170,  292,  589,  207,
      207,  208,  125,  588,  126,  127,  293,  293,  294,  306,
      306,  306,  587,  171,  171,  171,  398,  125,  172,  295,
      586,  209,  210,  126,  585,  211,  212,  434,  294,  294,
      294,  127,  584,  213,  404,  405,  214,  435,  215,  246,
      216,  247,  217,  248,  249,  172,  320,  250,  320,  251,
      583,  321,  321,  321,  252,  253,  254,  582,  255,  203,
      203,  203,  203,  308,  204,  309,  340,  341,  310,  234,
      234,  234,  342,  581,  311,  312,  580,  313,  579,  578,

      324,  325,  325,  326,  577,  326,  331,  332,  327,  327,
      327,  240,  240,  240,  576,  324,  325,  240,  240,  240,
      575,  325,  305,  305,  306,  331,  380,  574,  573,  330,
      330,  382,  572,  332,  571,  381,  381,  294,  570,  569,
      294,  294,  294,  568,  330,  306,  306,  306,  567,  330,
      321,  321,  321,  321,  321,  321,  396,  566,  396,  565,
      564,  397,  397,  397,  380,  231,  231,  327,  327,  327,
      327,  327,  327,  294,  294,  294,  397,  397,  397,  563,
      231,  562,  236,  236,  561,  231,  397,  397,  397,  560,
      559,  558,  557,  556,  555,  554,  553,  236,  325,  325,

      552,  551,  236,  550,  549,  548,  547,  546,  545,  544,
      543,  542,  541,  325,  540,  539,  538,  537,  325,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   93,   93,   93,   93,   93,   93,   93,
       93,   93,  107,  536,  535,  534,  107,  173,  533,  173,
      173,  173,  173,  173,  173,  175,  175,  175,  175,  175,

      175,  532,  175,  177,  177,  177,  177,  177,  177,  177,
      177,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  202,  531,  530,
      202,  202,  202,  202,  202,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  218,  529,  218,  218,  218,  218,
      218,  218,  218,  219,  219,  219,  219,  219,  528,  219,
      219,  219,  220,  220,  220,  220,  220,  527,  220,  220,
      220,  232,  232,  232,  232,  232,  232,  232,  232,  232,

      304,  526,  525,  304,  322,  322,  322,  322,  322,  322,
      322,  322,  322,  524,  523,  522,  521,  486,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  493,  492,  491,  490,  489,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,

      438,  437,  436,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  403,  402,  401,  400,  323,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  383,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  353,  352,  351,  350,  349,  348,  347,
      344,  343,  339,  338,  323,  319,  318,  317,  316,  315,
      314,  221,  290,  303,  302,  301,  300,  299,  298,  297,

      296,  290,  291,  290,  289,  176,  288,  287,  282,  281,
      276,  273,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  258,  257,  256,  245,  244,  233,
      229,  105,  228,  227,  226,  225,  224,  223,  222,  221,
      602,  187,  187,  185,  176,  176,  174,  164,  163,  162,
      161,  156,  155,  152,  141,  137,  136,  131,  111,  108,
      106,  105,  602,   74,   74,   19,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602
    } ;

static yyconst short int yy_chk[1037] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    5,    6,    7,    7,    2,    8,    8,    9,   11,
       10,   17,   11,   28,    7,  626,    9,    8,   10,    7,
       12,   17,    8,   12,   15,   15,   16,   16,   18,   28,

       33,   42,   42,  624,   37,    5,    6,    7,   18,   37,
        8,   33,    9,   11,   10,   47,   37,  596,   35,   17,
       47,   17,   58,   17,   12,   58,   17,   35,   35,   44,
       44,   53,   17,   17,   55,   17,   18,   53,   18,   53,
       18,   55,   36,   18,   36,   36,   36,   55,   69,   18,
       18,  126,   18,   38,   56,   38,   38,   38,   39,   72,
       39,   39,   39,   56,   72,   57,   38,   57,   38,   38,
       38,   39,   60,   39,   39,  154,   57,  126,  127,   60,
      595,   38,  154,   63,   63,  158,   39,   38,   81,   69,
       73,   73,   39,   63,   82,   38,   63,  127,   38,   81,

       39,  163,  158,  163,   81,   82,  156,  162,   73,   73,
       73,   90,   90,   90,   90,  162,   90,  156,  118,  118,
      118,  122,  122,  122,  159,  594,  237,  177,  592,  118,
      118,  118,  122,  122,  122,  179,  591,  167,  177,  159,
       73,   87,  167,  177,  118,  118,  179,  122,  122,   87,
      118,  179,  237,  122,  207,  207,  207,  238,   87,   87,
       87,  247,  123,  590,  123,  123,  123,  125,  588,  125,
      253,  247,  125,  125,  125,  123,  238,  123,  123,  253,
       87,   87,  262,  262,   87,   87,  332,  246,  168,  168,
      123,  585,   87,  246,  246,   87,  123,   87,  583,   87,

      582,   87,   91,  579,  123,  332,  168,  168,  168,  124,
      331,  124,  124,  124,  576,  169,  169,  191,  575,   91,
       91,   91,  124,  574,  124,  124,  191,  191,  191,  208,
      208,  208,  573,  169,  169,  169,  331,  124,  168,  192,
      572,   91,   91,  124,  571,   91,   91,  373,  192,  192,
      192,  124,  570,   91,  337,  337,   91,  373,   91,  137,
       91,  137,   91,  137,  137,  169,  230,  137,  230,  137,
      568,  230,  230,  230,  137,  137,  137,  567,  137,  203,
      203,  203,  203,  222,  203,  222,  250,  250,  222,  234,
      234,  234,  250,  566,  222,  222,  564,  222,  562,  561,

      234,  234,  234,  235,  560,  235,  243,  243,  235,  235,
      235,  239,  239,  239,  559,  234,  234,  240,  240,  240,
      557,  234,  305,  305,  305,  243,  293,  556,  555,  240,
      240,  294,  553,  243,  552,  293,  293,  293,  550,  549,
      294,  294,  294,  548,  240,  306,  306,  306,  543,  240,
      320,  320,  320,  321,  321,  321,  324,  542,  324,  541,
      540,  324,  324,  324,  381,  321,  321,  326,  326,  326,
      327,  327,  327,  381,  381,  381,  396,  396,  396,  538,
      321,  537,  327,  327,  536,  321,  397,  397,  397,  534,
      533,  532,  531,  530,  529,  528,  526,  327,  397,  397,

      525,  524,  327,  523,  522,  521,  520,  519,  517,  515,
      513,  512,  511,  397,  510,  509,  508,  507,  397,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  605,  605,  605,
      605,  605,  605,  605,  605,  605,  606,  606,  606,  606,
      606,  606,  606,  606,  606,  607,  607,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,  608,  608,  608,
      608,  608,  608,  609,  609,  609,  609,  609,  609,  609,
      609,  609,  610,  506,  505,  504,  610,  611,  503,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,

      612,  502,  612,  613,  613,  613,  613,  613,  613,  613,
      613,  614,  614,  614,  614,  614,  614,  614,  614,  614,
      615,  615,  615,  615,  615,  615,  615,  615,  615,  616,
      616,  616,  616,  616,  616,  616,  616,  616,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  618,  501,  499,
      618,  618,  618,  618,  618,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  620,  497,  620,  620,  620,  620,
      620,  620,  620,  621,  621,  621,  621,  621,  495,  621,
      621,  621,  622,  622,  622,  622,  622,  493,  622,  622,
      622,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      625,  492,  491,  625,  627,  627,  627,  627,  627,  627,
      627,  627,  627,  490,  489,  488,  487,  486,  485,  484,
      482,  475,  471,  470,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  447,  446,  445,  444,  443,
      442,  441,  440,  438,  437,  435,  434,  433,  432,  431,
      430,  429,  427,  426,  425,  423,  422,  421,  420,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  395,  394,  392,
      391,  390,  389,  388,  387,  386,  385,  384,  379,  378,

      377,  375,  374,  372,  371,  370,  369,  368,  367,  366,
      365,  363,  361,  360,  357,  356,  355,  354,  351,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  336,  335,  334,  333,  322,  319,  318,  317,  316,
      315,  314,  313,  312,  311,  310,  309,  308,  304,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  271,  270,  268,  267,  266,
      265,  264,  263,  261,  260,  259,  258,  256,  255,  254,
      252,  251,  249,  248,  232,  228,  227,  226,  225,  224,
      223,  221,  201,  200,  199,  198,  197,  196,  195,  194,

      193,  190,  189,  188,  186,  175,  172,  164,  161,  160,
      157,  155,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  133,  129,  120,
      117,  105,  104,  103,  102,  101,  100,   99,   98,   96,
       86,   85,   84,   83,   80,   78,   77,   67,   66,   65,
       64,   62,   61,   59,   54,   51,   50,   43,   32,   27,
       24,   21,   19,   14,   13,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,

      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
      602,  602,  602,  602,  602,  602
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#define INITIAL 0
#line 3 "lexer.l"
/*************************************************
 *    lexer.l
 *
 *    Programmer: Shaun Flisakowski
 *
 *************************************************/

#undef yywrap
extern "C" int yywrap(void);

#define  YY_BUFFER_STATE_DEFD

#include <cstdio>
#include <cstdlib>
#include <string>
#include <cerrno>

#include "config.h"
#include "gram.h"
#include "lexer.h"
#include "token.h"
#include "symbol.h"
#include "express.h"
#include "stemnt.h"
#include "project.h"

#ifdef   WINDOWS
#    ifndef  __STDC__
#    define  __STDC__    1
#    endif

int isatty(int) { return 1; }

#endif  /* WINDOWS */

char line_buf[MAX_TOKN_LEN];

int   err_cnt = 0;
int   err_tok = 0;
bool  possibleType = true;

int  in_preprocess = 0;
int  in_charconst = 0;

static int cpp_comment_warn = 1;
int  gcc2_paren_cnt = 0;

char  tokn_buff[MAX_TOKN_LEN];
char *tokn_end = &tokn_buff[MAX_TOKN_LEN-1];
char *tokn_ptr;

int cnt_nl(char *txt, int len);

bool  isWide;

#undef YY_INPUT

/* Scan input from a file pointer (default) */
#define YY_INPUT(buf,result,max_size) \
    do { \
        if (fgets((char*) (buf),max_size,yyin) == NULL) { \
           result = YY_NULL; \
        } else { \
           result = strlen((char*)(buf)); \
           strncpy(line_buf, (char*)(buf), MAX_TOKN_LEN); \
        } \
    } while(0)

#define YY_USER_ACTION \
    { \
        gProject->Parse_TOS->yycolno = gProject->Parse_TOS->yynxtcol; \
        gProject->Parse_TOS->yynxtcol += yyleng; \
    }


#undef HERE
#define HERE Location(gProject->Parse_TOS->yylineno, \
       gProject->Parse_TOS->yycolno, gProject->Parse_TOS->filename )

#undef SETPOS_TOKEN
#define SETPOS_TOKEN(TOKEN) \
	do { \
          lvalp->loc = new Location( \
                gProject->Parse_TOS->yylineno, \
                gProject->Parse_TOS->yycolno,  \
                gProject->Parse_TOS->filename ); \
	} while(0)

#undef  LAST_STATE
#define LAST_STATE() \
        do { \
          if (in_preprocess) \
            BEGIN(PP); \
          else \
            BEGIN(INITIAL); \
        } while (0)  

#undef  BEGIN_PP
#define BEGIN_PP() \
        do { \
          BEGIN(PP); \
          in_preprocess = 1; \
        } while(0)

YYSTYPE my_var;

EXTERN int yylex ARGS((YYSTYPE *lvalp));

/*  To give some args to yylex */
#undef YY_DECL
#ifdef  __STDC__
/*  #define YY_DECL int yylex YY_PROTO((YYSTYPE *lvalp))  */
#define YY_DECL int yylex (YYSTYPE *lvalp)
#else
#define YY_DECL int yylex(lvalp) YYSTYPE *lvalp;
#endif

#define Start 1
#define PP 2
#define CMMT 3
#define CC 4
#define STR 5
#define PPLN 6
#define GCC_ELIM 7
#define GCC_ATTRIB 8

/* %option nounput */
#line 925 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 149 "lexer.l"


#line 1082 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 603 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 966 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 151 "lexer.l"
{ BEGIN(CMMT); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 152 "lexer.l"
{ BEGIN(CC); isWide = false; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 153 "lexer.l"
{ BEGIN(CC); isWide = true; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 154 "lexer.l"
{ BEGIN(STR);   tokn_ptr = tokn_buff; isWide = false; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 155 "lexer.l"
{ BEGIN(STR);   tokn_ptr = tokn_buff; isWide = true; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 157 "lexer.l"
{ // Ambiguous C++ style comment, must parse as
                      //    '/' '/*' to be Ansi compliant 
                         yywarn(
                            "Ambiguous C++ comment, use '/ /*' -or- '// *'");
                         yyless(2);
                         SETPOS_TOKEN(DIV);
                         return(DIV);
                    }
	YY_BREAK
case 7:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 166 "lexer.l"
{ /* C++ style comment */
                         if (cpp_comment_warn){
                             cpp_comment_warn = 0;
                             yywarn("C++ style comment encountered");
                         }
                     }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 173 "lexer.l"
{
                      lvalp->storage = ST_Auto;
                      return(err_tok = AUTO);
                    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 177 "lexer.l"
{
                      lvalp->storage = ST_Extern;
                      return(err_tok = EXTRN);
                    }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 181 "lexer.l"
{
                      lvalp->storage = ST_Register;
                      return(err_tok = REGISTR);
                    }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 185 "lexer.l"
{
                      lvalp->storage = ST_Static;
                      return(err_tok = STATIC);
                    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 189 "lexer.l"
{
                      lvalp->storage = ST_Typedef;
                      return(err_tok = TYPEDEF);
                    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 194 "lexer.l"
{
                      lvalp->typeQual = TQ_Const;
                      return(err_tok = CONST);
                    }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 198 "lexer.l"
{
                      lvalp->typeQual = TQ_Volatile;
                      return(err_tok = VOLATILE);
                    }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 203 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Void);
                      return(err_tok = VOID);
                    }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 207 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Char);
                      return(err_tok = CHAR);
                    }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 211 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Short);
                      return(err_tok = SHORT);
                    }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 215 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Int);
                      return(err_tok = INT);
                    }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 219 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Long);
                      return(err_tok = LONG);
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 223 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Float);
                      return(err_tok = FLOAT);
                    }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 227 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Double);
                      return(err_tok = DOUBLE);
                    }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 231 "lexer.l"
{
                      lvalp->base = new BaseType(BT_Signed);
                      return(err_tok = SGNED);
                    }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 235 "lexer.l"
{
                      lvalp->base = new BaseType(BT_UnSigned);
                      return(err_tok = UNSGNED);
                    }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 240 "lexer.l"
{ SETPOS_TOKEN(BREAK); return(BREAK); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 241 "lexer.l"
{ SETPOS_TOKEN(CASE); return(CASE); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 242 "lexer.l"
{ SETPOS_TOKEN(CONT); return(CONT); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 243 "lexer.l"
{ SETPOS_TOKEN(DEFLT); return(DEFLT); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 244 "lexer.l"
{ SETPOS_TOKEN(DO); return(DO); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 245 "lexer.l"
{ SETPOS_TOKEN(ELSE); return(ELSE); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 246 "lexer.l"
{ SETPOS_TOKEN(ENUM); return(ENUM); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 247 "lexer.l"
{ SETPOS_TOKEN(FOR); return(FOR); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 248 "lexer.l"
{ SETPOS_TOKEN(GOTO); return(GOTO); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 249 "lexer.l"
{ SETPOS_TOKEN(IF); return(IF); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 250 "lexer.l"
{ SETPOS_TOKEN(RETURN); return(RETURN); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 251 "lexer.l"
{ SETPOS_TOKEN(SIZEOF); return(SIZEOF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 252 "lexer.l"
{ SETPOS_TOKEN(STRUCT); return(STRUCT); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 253 "lexer.l"
{ SETPOS_TOKEN(SWITCH); return(SWITCH); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 254 "lexer.l"
{ SETPOS_TOKEN(UNION); return(UNION); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 255 "lexer.l"
{ SETPOS_TOKEN(WHILE); return(WHILE); }
	YY_BREAK
/* GCC2 Extensions */
case 40:
YY_RULE_SETUP
#line 258 "lexer.l"
{ BEGIN(GCC_ELIM); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 259 "lexer.l"
{ BEGIN(GCC_ELIM); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 260 "lexer.l"
{ BEGIN(GCC_ELIM); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 262 "lexer.l"
{ gcc2_paren_cnt++; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 263 "lexer.l"
{ /* Throw away */ }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 264 "lexer.l"
{ if (--gcc2_paren_cnt == 0)
                          BEGIN(INITIAL);
                      }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 268 "lexer.l"
{ BEGIN(GCC_ATTRIB); return(err_tok = ATTRIBUTE); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 269 "lexer.l"
{ BEGIN(GCC_ATTRIB); return(err_tok = ATTRIBUTE); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 271 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 272 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 273 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = ALIGNED); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 274 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 275 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 276 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = PACKED); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 278 "lexer.l"
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 279 "lexer.l"
{ SETPOS_TOKEN(LPAREN); return(LPAREN); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 281 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 282 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 283 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = FORMAT); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 284 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 285 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 286 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = MODE); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 287 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 288 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 289 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = CONST); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 290 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 291 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 292 "lexer.l"
{ BEGIN(INITIAL); return(err_tok = NORETURN); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 294 "lexer.l"
{
                      lvalp->typeQual = TQ_Const;
                      return(err_tok = CONST);
                    }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 299 "lexer.l"
{
                        lvalp->typeQual = TQ_Const;
                        return(err_tok = CONST);
                      }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 303 "lexer.l"
{
                      lvalp->type = new BaseType(BT_Signed);
                      return(err_tok = SGNED);
                    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 307 "lexer.l"
{
                        lvalp->type = new BaseType(BT_Signed);
                        return(err_tok = SGNED);
                      }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 311 "lexer.l"
{
                        lvalp->typeQual = TQ_Volatile;
                        return(err_tok = VOLATILE);
                      }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 315 "lexer.l"
{
                          lvalp->typeQual = TQ_Volatile;
                          return(err_tok = VOLATILE);
                        }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 320 "lexer.l"
{ }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 321 "lexer.l"
{ }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 322 "lexer.l"
{ }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 324 "lexer.l"
{ }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 325 "lexer.l"
{ }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 326 "lexer.l"
{ }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 328 "lexer.l"
{ }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 330 "lexer.l"
{ }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 331 "lexer.l"
{ }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 332 "lexer.l"
{ }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 334 "lexer.l"
{ }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 335 "lexer.l"
{ }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 336 "lexer.l"
{ }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 337 "lexer.l"
{ }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 338 "lexer.l"
{ }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 339 "lexer.l"
{ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 340 "lexer.l"
{ }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 341 "lexer.l"
{ }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 342 "lexer.l"
{ }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 344 "lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 345 "lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 346 "lexer.l"
{ /* Windows only non-standard C crud */ }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 349 "lexer.l"
{ lvalp->binOp = BO_Plus; return(PLUS); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 350 "lexer.l"
{ lvalp->binOp = BO_Minus; return(MINUS); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 351 "lexer.l"
{ lvalp->binOp = BO_Mult; return(STAR); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 352 "lexer.l"
{ lvalp->binOp = BO_Div; return(DIV); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 353 "lexer.l"
{ lvalp->binOp = BO_Mod; return(MOD); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 355 "lexer.l"
{ lvalp->assignOp = AO_PlusEql; return(ASSIGN); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 356 "lexer.l"
{ lvalp->assignOp = AO_MinusEql; return(ASSIGN); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 357 "lexer.l"
{ lvalp->assignOp = AO_MultEql; return(ASSIGN); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 358 "lexer.l"
{ lvalp->assignOp = AO_DivEql; return(ASSIGN); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 359 "lexer.l"
{ lvalp->assignOp = AO_ModEql; return(ASSIGN); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 361 "lexer.l"
{ SETPOS_TOKEN(NOT); return(NOT); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 362 "lexer.l"
{ SETPOS_TOKEN(AND); return(AND); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 363 "lexer.l"
{ SETPOS_TOKEN(OR); return(OR); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 365 "lexer.l"
{ SETPOS_TOKEN(B_NOT); return(B_NOT); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 366 "lexer.l"
{ SETPOS_TOKEN(B_AND); return(B_AND); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 367 "lexer.l"
{ SETPOS_TOKEN(B_OR); return(B_OR); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 368 "lexer.l"
{ SETPOS_TOKEN(B_XOR); return(B_XOR); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 370 "lexer.l"
{ lvalp->assignOp = AO_BitAndEql; return(ASSIGN); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 371 "lexer.l"
{ lvalp->assignOp = AO_BitOrEql; return(ASSIGN); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 372 "lexer.l"
{ lvalp->assignOp = AO_BitXorEql; return(ASSIGN); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 374 "lexer.l"
{ lvalp->binOp = BO_Shl; return(L_SHIFT); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 375 "lexer.l"
{ lvalp->binOp = BO_Shr; return(R_SHIFT); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 376 "lexer.l"
{ lvalp->assignOp = AO_ShlEql; return(ASSIGN); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 377 "lexer.l"
{ lvalp->assignOp = AO_ShrEql; return(ASSIGN); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 379 "lexer.l"
{ lvalp->relOp = RO_Equal; return(COMP_EQ); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 380 "lexer.l"
{ lvalp->relOp = RO_Less; return(COMP_ARITH); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 381 "lexer.l"
{ lvalp->relOp = RO_LessEql; return(COMP_ARITH); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 382 "lexer.l"
{ lvalp->relOp = RO_Grtr; return(COMP_ARITH); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 383 "lexer.l"
{ lvalp->relOp = RO_GrtrEql; return(COMP_ARITH); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 384 "lexer.l"
{ lvalp->relOp = RO_NotEqual; return(COMP_EQ); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 386 "lexer.l"
{ lvalp->assignOp = AO_Equal; return(EQ); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 387 "lexer.l"
{ SETPOS_TOKEN(INCR); return(INCR); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 388 "lexer.l"
{ SETPOS_TOKEN(DECR); return(DECR); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 390 "lexer.l"
{ SETPOS_TOKEN(LPAREN);
                      possibleType = true;
                      return(LPAREN);
                    }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 394 "lexer.l"
{ SETPOS_TOKEN(RPAREN); return(RPAREN); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 395 "lexer.l"
{ SETPOS_TOKEN(LBRCKT); return(LBRCKT); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 396 "lexer.l"
{ SETPOS_TOKEN(RBRCKT); return(RBRCKT); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 397 "lexer.l"
{ SETPOS_TOKEN(LBRACE); return(LBRACE); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 398 "lexer.l"
{ SETPOS_TOKEN(RBRACE); return(RBRACE); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 400 "lexer.l"
{ SETPOS_TOKEN(DOT); return(DOT); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 401 "lexer.l"
{ SETPOS_TOKEN(ARROW); return(ARROW); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 403 "lexer.l"
{ SETPOS_TOKEN(QUESTMARK); return(QUESTMARK); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 404 "lexer.l"
{ SETPOS_TOKEN(COLON); return(COLON); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 405 "lexer.l"
{ SETPOS_TOKEN(SEMICOLON); return(SEMICOLON); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 406 "lexer.l"
{ SETPOS_TOKEN(COMMA); return(COMMA); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 407 "lexer.l"
{ SETPOS_TOKEN(ELLIPSIS); return(ELLIPSIS); }
	YY_BREAK
/* Unused (invalid) characters */
case 142:
YY_RULE_SETUP
#line 410 "lexer.l"
{ SETPOS_TOKEN(BACKQUOTE); return(BACKQUOTE); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 411 "lexer.l"
{ SETPOS_TOKEN(AT); return(AT); }
	YY_BREAK
/* Preprocessor Stuff */
case 144:
YY_RULE_SETUP
#line 414 "lexer.l"
{ gProject->Parse_TOS->yylineno++;
                             gProject->Parse_TOS->yynxtcol = 0; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 417 "lexer.l"
{ BEGIN(PPLN); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 418 "lexer.l"
{ BEGIN(PPLN); yyless(1); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 419 "lexer.l"
{ BEGIN_PP(); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 421 "lexer.l"
{ 
                       BEGIN_PP();
                       if (get_lineno(yytext,&(lvalp->stemnt)))
                         return(err_tok = PP_LINE);
                     }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 427 "lexer.l"
{  /* Preprocessor continuation line */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 432 "lexer.l"
{  /* End of this preprocessor logical line */
                         in_preprocess = 0;
                         yyless(0);        /* Hack! */
                         BEGIN(INITIAL);
                       }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 438 "lexer.l"
{ /* Swallow cpp junk to prevent it being echo'd */ }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 440 "lexer.l"
{    /* Identifier */

                         lvalp->symbol = new Symbol();
                       
                         lvalp->symbol->name = yytext;

                         /* Check the symbol table and insert a  */
                         /* ptr back to the definition.  */
                         {
                           SymEntry *se
                              = gProject->Parse_TOS->contxt->syms->Lookup(
                                    lvalp->symbol->name);
                           lvalp->symbol->entry = se;
 
                           if (possibleType)
                           {
                             if (se && se->IsTypeDef())
                             {
                                 return(err_tok = TYPEDEF_NAME);
                             }
                           }
                         }

                         return(err_tok = IDENT);
                       }
	YY_BREAK
case 153:
#line 467 "lexer.l"
case 154:
#line 468 "lexer.l"
case 155:
YY_RULE_SETUP
#line 468 "lexer.l"
{  /* An integer */
                         long i = strtol(yytext, (char**) NULL, 0);

                         if (errno == ERANGE)
                         {
                            ulong ui;
                            ui = strtoul(yytext, (char**) NULL, 0);
                            lvalp->consValue = new UIntConstant(ui,HERE);
                         }
                         else
                         { 
                             lvalp->consValue = new IntConstant(i,HERE);
                         } 

                         return(err_tok = INUM);
                    }
	YY_BREAK
case 156:
#line 486 "lexer.l"
case 157:
#line 487 "lexer.l"
case 158:
#line 488 "lexer.l"
case 159:
YY_RULE_SETUP
#line 488 "lexer.l"
{
                         /*
                         ** Note: The floatsuffix, if any, will be
                         ** ignored by atof().
                         */
                         lvalp->consValue = new FloatConstant(atof(yytext),HERE);
                         return(err_tok = RNUM);
                       }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 497 "lexer.l"
{   /* String Pasting */
                         cnt_nl(yytext,yyleng);
                       }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 501 "lexer.l"
{   /* Closing quote */
                         LAST_STATE();
                         *tokn_ptr = '\0';
                         lvalp->consValue = new StringConstant(tokn_buff,HERE,isWide);
                         return(err_tok = STRING);
                       }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 508 "lexer.l"
{ /* Error - unterminated string constant */
                         yyerr("Unterminated string constant starting");
                         LAST_STATE();
                         return(INVALID);
                       }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 514 "lexer.l"
{ /* octal escape sequence */
                         uint result;
                         char tmpOct[20];

                         strncpy(tmpOct,yytext,yyleng);
                         tmpOct[yyleng] = '\0';
                         tmpOct[4] = '\0';

                         if (yyleng > 4)
                             yyless(4);

                         if (sscanf(tmpOct+1, "%o", &result ) < 1)
                         {
                             yyerr("Invalid octal escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                            yyerr("Escape sequence out-of-bounds");
                         }

                         if (tokn_ptr < tokn_end)
                            *tokn_ptr++ = result;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 543 "lexer.l"
{   /* hex escape sequence - ISO C */
                         uint result;

                         if (sscanf(yytext+2, "%x", &result ) < 1)
                         {
                             yyerr("Invalid hex escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                            yyerr("Escape sequence out-of-bounds");
                         } else if (yyleng > 4){
                            yywarn("Hexadecimal escape exceeds two chars");
                         }

                         if (tokn_ptr < tokn_end)
                            *tokn_ptr++ = result;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 566 "lexer.l"
{  /* Bad escape sequence */
                         yywarn("Bad escape sequence in string");
                        *tokn_ptr++ = '?';
                       }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 571 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\n';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 578 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\t';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 585 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\r';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 592 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\b';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 599 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\f';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 606 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\v';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 613 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = '\a';
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 620 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = ESC_VAL;
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 627 "lexer.l"
{  /* String continuation */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 632 "lexer.l"
{
                         if (tokn_ptr < tokn_end)
                           *tokn_ptr++ = yytext[1];
                         else
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 639 "lexer.l"
{
                         int n = yyleng;
                         if (tokn_ptr + n < tokn_end) {
                             memcpy(tokn_ptr,yytext,n);
                             tokn_ptr += n;
                         } else 
                            yywarn("String constant too long");
                       }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 648 "lexer.l"
{   /* Inside C-style comment */ }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 650 "lexer.l"
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 655 "lexer.l"
{ }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 656 "lexer.l"
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                       }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 660 "lexer.l"
{
                       }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 662 "lexer.l"
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 667 "lexer.l"
{ yywarn("/* inside comment"); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 668 "lexer.l"
{   /* Stars */ }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 669 "lexer.l"
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 674 "lexer.l"
{
                         LAST_STATE();
                       }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 678 "lexer.l"
{   /* octal escape sequence */
                         uint result;

                         if (sscanf(yytext+1, "%o", &result ) < 1)
                         {
                             yyerr("Invalid octal escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }
                         
                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                             yywarn("Escape sequence out-of-bounds");
                             result = 0;
                         }

                         lvalp->consValue = new CharConstant((char) result, HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 699 "lexer.l"
{   /* hex escape sequence - ISO C */
                         uint result;

                         if (sscanf(yytext+2, "%x", &result ) < 1)
                         {
                             yyerr("Invalid hex escape sequence");
                             LAST_STATE();
                             return(INVALID);
                         }

                             /* error, constant is out-of-bounds */
                         if ( result > 0xff ){
                             yywarn("Escape sequence out-of-bounds");
                             result = 0;
                         } else if (yyleng > 5){
                             yywarn("Hexadecimal escape exceeds two chars");
                             result = 0;
                         }

                         lvalp->consValue = new CharConstant((char) result, HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 723 "lexer.l"
{  /* Bad escape sequence */
                         yywarn("Bad escape sequence in char constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 730 "lexer.l"
{ /* Error unterminated char constant */
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         yywarn("Unterminated char constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 739 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\n',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 745 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\t',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 751 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\r',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 757 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\b',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 763 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\f',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 769 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\v',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 775 "lexer.l"
{
                         lvalp->consValue = new CharConstant('\a',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 781 "lexer.l"
{
                         lvalp->consValue = new CharConstant(ESC_VAL,HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 787 "lexer.l"
{
                         gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 1;  /* Oddity */
                         lvalp->consValue = new CharConstant('\n',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 795 "lexer.l"
{
                         lvalp->consValue = new CharConstant(yytext[1],HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 801 "lexer.l"
{
                         lvalp->consValue = new CharConstant(*yytext,HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 807 "lexer.l"
{ /* Empty */
                         yywarn("Empty character constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 814 "lexer.l"
{ /* Multiple characters */
                         yywarn("Invalid character constant");
                         lvalp->consValue = new CharConstant('\0',HERE,isWide);
                         LAST_STATE();
                         return(err_tok = CHAR_CONST);
                       }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 821 "lexer.l"
{  /* space/tab/formfeed/vertical tab (ignore) */ }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 823 "lexer.l"
{ gProject->Parse_TOS->yylineno++;
                         gProject->Parse_TOS->yynxtcol = 0;
                         in_preprocess = 0;
                       }
	YY_BREAK
case YY_STATE_EOF(CMMT):
#line 828 "lexer.l"
{ 
                         yyerr("EOF reached inside comment");
                         in_preprocess = 0;
                         return(0);
                       }
	YY_BREAK
case YY_STATE_EOF(CC):
#line 834 "lexer.l"
{ 
                         yyerr("EOF reached inside character constant");
                         return(0);
                       }
	YY_BREAK
case YY_STATE_EOF(STR):
#line 839 "lexer.l"
{ 
                         yyerr("EOF reached inside string constant");
                         return(0);
                       }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 844 "lexer.l"
{ /* Any unknown char is an error */
                        std::cerr << "Error: Line " << gProject->Parse_TOS->yylineno
                             << ": Illegal Character";
                        if ((yytext[0] >= ' ') && (yytext[0] <= '~'))
                            std::cerr << ": '" << yytext[0] << "'\n";
                        else
                            std::cerr << ", ASCII: " << std::oct << (int)(yytext[0]) 
                                 << " (octal)\n" << std::dec;
                       }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 854 "lexer.l"
ECHO;
	YY_BREAK
#line 2610 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(Start):
case YY_STATE_EOF(PP):
case YY_STATE_EOF(PPLN):
case YY_STATE_EOF(GCC_ELIM):
case YY_STATE_EOF(GCC_ATTRIB):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 603 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 603 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 602);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 854 "lexer.l"


/************************************************************************
//
// yywrap() - This function is called by the lexer [yylex() or sslex()] when
//            the end-of-file (or end-of-string for sslex()) is reached.
//            It gets the next file/string ready (if any) and returns 1
//            which indicates to the lexer that there are no more files
//            remaining.  The lexer returns 0 to the parser, indicating
//            no more tokens are remaining. The parser function, yyparse(),
//            then returns 0, indicating that the parse is done.  This
//            behaviour allows a single item to be parsed to be placed
//            on the stack and parsed without the entire stack being consumed.
//
// **********************************************************************/

int yywrap(void)
{
    in_preprocess = 0;
    return 1;
}

/***********************************************************************/
int cnt_nl(char *txt, int len)
{
  int ret = 0;

  do {
    switch (*txt++) {
      case '\n':
        ret++;
        gProject->Parse_TOS->yylineno++;
        gProject->Parse_TOS->yynxtcol = 0;
        break;

      default:
        break;
    }
  } while(--len > 0);

  return ret;
}

/***********************************************************************/
/*  Process a #line directive */
int
get_lineno(char *txt, Statement **stement)
{
    int   nxt, ret;
    int   ln = 0;

    do {

        if (txt)
        {
            if (sscanf(txt,"%d", &ln) < 1)
                break;

            gProject->Parse_TOS->yylineno = ln - 1;
           
            txt = strchr(txt,'"');

            if (txt)
            {
                char *pnt_end;

                txt++;

                pnt_end = strchr(txt,'"');
                if (pnt_end)
                    *pnt_end = '\0';
                else
                    break;

                gProject->Parse_TOS->filename = txt;

                if (gProject->Parse_TOS->realfile == "")
                {
                    gProject->Parse_TOS->realfile = txt;
                    gProject->Parse_TOS->in_realfile = 1;

                    *stement = new EndInclStemnt(HERE);
                    return 1;
                }

                nxt = (gProject->Parse_TOS->realfile == txt);

                ret = (gProject->Parse_TOS->in_realfile != nxt);
                gProject->Parse_TOS->in_realfile = nxt;

                /*  std::cerr <<  "line: " << txt << " ret: " << ret << std::endl;  */

                if (ret)
                {
                    if (!nxt)
                    {
                        *stement = new InclStemnt(
                            gProject->Parse_TOS->filename, HERE);
                    }
                    else
                    {
                        *stement = new EndInclStemnt(HERE);
                    }
                }

                return ret;
            }

            return 0;
        }

    } while(0);

    yywarn("Malformed #line directive");
    return 0;
}

/***********************************************************************/

void print_caret(char *s, int pos)
{
    char *str;
    int i = 0;

    for (str=s; *str && (i<pos); i++, str++)
        if (*str=='\t')
            std::cerr << "\t";
        else
            std::cerr << " ";

    std::cerr << "^\n";
}
 
/***********************************************************************/

void yywarn(char *s)
{
    std::cerr << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
         << ": Warning - " << s << ":\n" << line_buf;
    print_caret(line_buf,gProject->Parse_TOS->yycolno);
}

/***********************************************************************/

int yyerr(char *s)
{
    std::cerr << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
         << ": " << s << ":\n" << line_buf;
    print_caret(line_buf,gProject->Parse_TOS->yycolno);

    if (++err_cnt >= 10){
        std::cerr << "Too many errors (" << err_cnt << " detected) - quitting.\n";
        fclose(yyin);
        return(1);
    }
    return(0); 
}

/***********************************************************************/

int yyerror(char *s)
{
        /* Insure temination */
    line_buf[MAX_TOKN_LEN-1] = '\0';
    std::cerr << gProject->Parse_TOS->filename << ":" << gProject->Parse_TOS->yylineno
         << ": Error (" << s << ") before '"
         << toksym(err_tok,0) << "'\n" << line_buf;
    print_caret(line_buf,gProject->Parse_TOS->yycolno);

    if (++err_cnt >= 10){
        std::cerr << "Too many errors (" << err_cnt << " detected) - quitting.\n";
        fclose(yyin);
        return(1);
    }
    return(0);
}

/***********************************************************************/
/* created 11/6/99 */
void function_to_eliminate_gcc_warning()
{
  yyunput(0,"");
}

/***********************************************************************/
