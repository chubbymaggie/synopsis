#
# Copyright (C) 2003 Stefan Seefeld
# All rights reserved.
# Licensed to the public under the terms of the GNU LGPL (>= 2),
# see the file COPYING for details.
#

SHELL	:= /bin/sh

srcdir	:= @srcdir@
synopsis:= python synopsis.py

PYTHON	:= @PYTHON@

CC	:= @CC@
CXX	:= @CXX@
MAKEDEP	:= $(CXX) -M
CPPFLAGS:= @CPPFLAGS@ -I $(srcdir) -I $(srcdir)/../../../../Cxx-API/include -I @PYTHON_INCLUDE@
CFLAGS	:= @CFLAGS@
CXXFLAGS:= @CXXFLAGS@
LDFLAGS	:= @LDFLAGS@
LIBS	:= ../../../../Cxx-API/lib/Cxx-API.a @LIBS@
LIBRARY_EXT := @LIBEXT@

UCPP_FLAGS:= -DSYNOPSIS -DSTAND_ALONE -DAUDIT -DMEM_CHECK

UCPP_FILES	:= mem hashtable cpp lexer assert macro eval

HDR	:= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/*.h))
SRC	:= $(patsubst %, %.c, $(UCPP_FILES)) ucpp.cc
OBJ	:= $(patsubst %, %.o, $(basename $(SRC)))
HDR_SYN	:= $(patsubst %, %.syn, $(HDR))
CC_SYN	:= $(patsubst %, %.syn, $(SRC))
DEP	:= $(patsubst %.o, %.d, $(OBJ))

TARGET	:= ucpp$(LIBRARY_EXT)

vpath %.c $(srcdir)
vpath %.h $(srcdir)
vpath %.cc $(srcdir)

all: $(TARGET)

doc: ucpp.syn ucpp-impl.syn

# Link C++ files together
ucpp.syn: $(HDR_SYN)
	@echo linking C++ headers together
	$(synopsis) link_cxx --output=$@ $^

ucpp-impl.syn: $(HDR_SYN) $(C_SYN)
	@echo linking all C++ files together
	$(synopsis) link_cxx --output=$@ $^

%.d: %.cc
	@echo generating dependencies for $(<F)
	$(SHELL) -ec '$(MAKEDEP) $(CPPFLAGS) $< | sed "s,$(*F)\\.o[ :]*,$*\\.d $*\\.o : ,g" > $@'

%.d: %.c
	@echo generating dependencies for $(<F)
	$(SHELL) -ec '$(MAKEDEP) $(CPPFLAGS) $< | sed "s,$(*F)\\.o[ :]*,$*\\.d $*\\.o : ,g" > $@'

%.o : %.cc
	@echo compiling $(@F)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<

%.o : %.c
	@echo compiling $(@F)
	$(CC) $(CPPFLAGS) $(CFLAGS) $(UCPP_FLAGS) -c -o $@ $<

Makefile: $(srcdir)/Makefile.in
	./config.status --file Makefile

# Compile C++ .h files
$(HDR_SYN): %.syn: %
	@echo parsing $^
	mkdir -p $(dir $@)
	$(synopsis) cxx --output=$@ $?

# Compile C++ .cc files
$(CC_SYN): %.syn: %
	@echo parsing $^
	mkdir -p $(dir $@)
	$(synopsis) cxx --output=$@ $?

ucpp$(LIBRARY_EXT): $(OBJ)
	$(CXX) -shared $(LDFLAGS) -o $@ $^ $(LIBS)

clean :
	rm -f *~ *.o ucpp$(LIBRARY_EXT) *.syn *.d *.pyc *.pyo base_lib

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean))
-include $(DEP)
endif
