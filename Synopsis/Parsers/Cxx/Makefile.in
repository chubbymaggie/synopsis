#
# Copyright (C) 2003 Stefan Seefeld
# All rights reserved.
# Licensed to the public under the terms of the GNU LGPL (>= 2),
# see the file COPYING for details.
#

SHELL	:= /bin/sh

srcdir	:= @srcdir@
synopsis:= python synopsis.py

PYTHON	:= @PYTHON@

CC	:= @CC@
CXX	:= @CXX@
MAKEDEP	:= $(CXX) -M
CPPFLAGS:= @CPPFLAGS@ -I occ -I $(srcdir) -I $(srcdir)/../../../Cxx-API/include -I @PYTHON_INCLUDE@
CFLAGS	:= @CFLAGS@
CXXFLAGS:= @CXXFLAGS@
LDFLAGS	:= @LDFLAGS@
LIBS	:= ../../../Cxx-API/lib/libSynopsis.a @LIBS@ -lpthread
LIBRARY_EXT := @LIBEXT@

GC_LIB	:= @GC_LIB@

OCC_SO	:= occ$(LIBRARY_EXT)
LINK_SO	:= link$(LIBRARY_EXT)

OCC_FILES := Buffer HashTable Lexer \
             PTree/Node PTree/operations PTree/Atom PTree/List \
             PTree/Atoms PTree/Lists PTree/generation \
             Encoding Environment \
             Walker TypeInfo Parser Class ClassWalker \
             MetaClass QuoteClass Member ClassBodyWalker

SYN_FILES := Translator occ swalker ast builder type dict \
             dumper decoder swalker-syntax linkstore \
             lookup filter

HDR	:= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/occ/*.hh))
HDR	+= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/occ/PTree/*.hh))
HDR	+= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/syn/*.hh))

# Generate sources, objs and debug-objs from the FILES
SRC 	:= $(patsubst %, occ/%.cc, $(OCC_FILES))
SRC	+= $(patsubst %, syn/%.cc, $(SYN_FILES))
OCC_OBJ := $(patsubst %, occ/%.o, $(OCC_FILES))
SYN_OBJ	:= $(patsubst %, syn/%.o, $(SYN_FILES))
OBJ	:= $(patsubst %.cc, %.o, $(SRC))
CC_SYN	:= $(patsubst %, %.syn, $(SRC))
HDR_SYN	:= $(patsubst %, %.syn, $(HDR))
DEP	:= $(patsubst %.cc, %.d, $(SRC))

TARGETS	:= $(OCC_SO) $(LINK_SO)

vpath %.cc $(srcdir)
vpath %.c $(srcdir)
vpath %.h $(srcdir)
vpath %.hh $(srcdir)

all: $(TARGETS)

doc: occ.syn occ-impl.syn

# Link C++ files together
occ.syn: $(HDR_SYN)
	@echo linking C++ headers together
	$(synopsis) link_cxx --output=$@ $^

occ-impl.syn: $(HDR_SYN) $(CC_SYN)
	@echo linking all C++ files together
	$(synopsis) link_cxx --output=$@ $^

%.d: %.cc
	@echo generating dependencies for $(<F)
	$(SHELL) -ec '$(MAKEDEP) $(CPPFLAGS) -I$(srcdir)/gc/include -I$(srcdir)/occ $< | sed "s,$(*F)\\.o[ :]*,$*\\.d $*\\.o : ,g" > $@'

%.o: %.cc
	@echo compiling $(@F)
	$(CXX) $(CPPFLAGS) -I$(srcdir)/gc/include -I$(srcdir)/occ $(CXXFLAGS) $(OPTIMISE) -c -o $@ $<

Makefile: $(srcdir)/Makefile.in
	./config.status --file Makefile

# Compile C++ .hh files
$(HDR_SYN): %.syn: %
	@echo parsing $^
	mkdir -p $(dir $@)
	$(synopsis) cxx --output=$@ $?

# Compile C++ .cc files
$(CC_SYN): %.cc.syn: %.cc
	@echo parsing $^
	mkdir -p $(dir $@)
	$(synopsis) cxx --output=$@ $?

link-synopsis:	$(srcdir)/syn/link.cc
	$(CXX) $(CPPFLAGS) -DSTANDALONE $(CXXFLAGS) $(DEBUG) -o link-synopsis link.cc

# This calls make in the gc dir to create the gc.a file
$(GC_LIB):
	$(MAKE) -C gc

# This creates the final occ python module
$(OCC_SO): $(SYN_OBJ) opencxx.a
	$(CXX) -shared $(LDFLAGS) -o $@ $^ $(LIBS)

# This creates the final link python module
$(LINK_SO): $(srcdir)/syn/link.cc
	$(CXX) -shared $(CPPFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)

# Compile an archive of the OCC files
opencxx.a : $(GC_LIB) $(OCC_OBJ)
ifneq ($(GC_LIB),)
	cp $(GC_LIB) $@
endif
	ar rcs $@ $(OCC_OBJ)

clean :
	rm -f *~ syn/*.o occ/*.o occ/PTree/*.o syn/*.d occ/*.d occ/PTree/*.d \
        *.dll *.so *core opencxx.a \
	*.pyc *.pyo base_lib

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean))
-include $(DEP)
endif
