#
# Copyright (C) 2003 Stefan Seefeld
# All rights reserved.
# Licensed to the public under the terms of the GNU LGPL (>= 2),
# see the file COPYING for details.
#

SHELL	:= /bin/sh

srcdir	:= @srcdir@
builddir:= @builddir@

PYTHON	:= @PYTHON@
SYNOPSIS:= $(PYTHON) synopsis.py

CXX	:= @CXX@
MAKEDEP	:= $(CXX) -M
CPPFLAGS:= @CPPFLAGS@ -I $(srcdir)
CPPFLAGS+= @SYN_CPP@ -I @PYTHON_INCLUDE@
CXXFLAGS:= @CXXFLAGS@
LDFLAGS	:= @LDFLAGS@
LIBS	:= @SYN_LIBS@ @LIBS@
LIBRARY_EXT := @LIBEXT@

TARGET	:= ParserImpl$(LIBRARY_EXT)

OCC_FILES := HashTable Environment TypeInfo TypeInfoVisitor \
             Walker Class ClassWalker \
             MetaClass QuoteClass Member ClassBodyWalker

SYN_FILES := swalker ast builder type dict  dumper decoder lookup filter \
             Translator SXRGenerator ParserImpl

HDR	:= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/occ/*.hh))
HDR	+= $(patsubst $(srcdir)/%, %, $(wildcard $(srcdir)/syn/*.hh))

# Generate sources, objs and debug-objs from the FILES
SRC 	:= $(patsubst %, occ/%.cc, $(OCC_FILES))
SRC	+= $(patsubst %, syn/%.cc, $(SYN_FILES))
OCC_OBJ := $(patsubst %, occ/%.o, $(OCC_FILES))
SYN_OBJ	:= $(patsubst %, syn/%.o, $(SYN_FILES))
OBJ	:= $(patsubst %.cc, %.o, $(SRC))
CC_SYN	:= $(patsubst %, %.syn, $(SRC))
HDR_SYN	:= $(patsubst %, %.syn, $(HDR))
DEP	:= $(patsubst %.cc, %.d, $(SRC))

vpath %.cc $(srcdir)
vpath %.c $(srcdir)
vpath %.h $(srcdir)
vpath %.hh $(srcdir)

all: $(TARGET)

doc:

%.d: %.cc
	@echo generating dependencies for $(<F)
	$(SHELL) -ec '$(MAKEDEP) $(CPPFLAGS) -I$(srcdir)/gc/include -I$(srcdir)/occ $< | sed "s,$(*F)\\.o[ :]*,$*\\.d $*\\.o : ,g" > $@'

%.o: %.cc
	@echo compiling $(@F)
	$(CXX) $(CPPFLAGS) -I$(srcdir)/gc/include -I$(srcdir)/occ $(CXXFLAGS) -c -o $@ $<

Makefile: $(srcdir)/Makefile.in
	./config.status --file Makefile

# Compile C++ .hh files
$(HDR_SYN): %.syn: %
	@echo parsing $^
	mkdir -p $(dir $@)
	$(SYNOPSIS) cxx --output=$@ $?

# Compile C++ .cc files
$(CC_SYN): %.cc.syn: %.cc
	@echo parsing $^
	mkdir -p $(dir $@)
	$(SYNOPSIS) cxx --output=$@ $?

# This creates the final occ python module
$(TARGET): $(SYN_OBJ) opencxx.a
	$(CXX) -shared $(LDFLAGS) -o $@ $^ $(LIBS)

# Compile an archive of the OCC files
opencxx.a : $(OCC_OBJ)
	ar rcs $@ $(OCC_OBJ)

clean :
	rm -f *~ syn/*.o occ/*.o syn/*.d occ/*.d \
        *.dll *.so *core opencxx.a \
	*.pyc *.pyo base_lib

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean))
-include $(DEP)
endif
