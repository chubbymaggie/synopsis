
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 102
#define YY_END_OF_BUFFER 103
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[520] =
    {   0,
        0,    0,   78,   78,    0,    0,    0,    0,    0,    0,
      103,  101,  100,  100,  101,  101,  101,  101,   57,   54,
      101,  101,  101,   52,   52,   52,   52,   52,   52,  101,
      101,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,  100,
      101,   78,   80,   79,   89,   93,  101,  101,   57,   54,
       89,   91,  102,  102,   84,   85,    0,   71,    0,    0,
        0,   69,   77,    0,   70,   55,    0,   75,    0,    0,
       54,   51,   49,   50,   52,   52,    0,    0,   52,   52,
       52,   92,    0,   53,    0,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       18,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,    0,    0,    0,    0,    0,    0,   78,
       79,   79,   81,   89,   93,    0,    0,   55,    0,   54,
       89,   91,    0,   84,   85,    0,   71,   58,    0,   58,
        0,    0,    0,   74,    0,    0,   76,   69,   73,    0,
        0,   68,   56,   52,    0,   72,    0,    0,    0,   52,
       52,   52,   53,    0,   52,    2,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   28,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,    0,   96,    0,    0,    0,
        0,    0,   62,   59,    0,    0,    0,    0,   69,   73,
        0,    0,   70,   52,   72,   63,    0,   63,    0,    0,
        0,   52,   39,   52,    0,   52,   52,   52,    5,    6,
       52,   52,   52,   52,   52,   12,   52,   52,   52,   52,
       52,   52,   52,   22,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   46,   52,   52,    0,    0,    0,    0,

        0,   59,    0,   61,    0,   60,    0,    0,   69,   15,
       67,   64,    0,    0,    0,   52,   52,    0,   52,   52,
       52,    7,   52,   52,   52,   52,   52,   52,   16,   17,
       19,   52,   21,   52,   52,   26,   52,   52,   52,   52,
       52,   52,   34,   52,   52,   52,   52,   52,   52,   42,
       52,   52,   47,   52,    0,    0,    0,    0,    0,    0,
        0,   64,    0,   66,    0,   65,    0,   25,   52,    0,
       52,   52,   52,   52,    9,   52,   11,   52,   52,   52,
       23,   24,   27,   52,   30,   31,   52,   52,   35,   36,
       52,   38,   52,   52,   52,   52,   52,    0,   95,    0,

        0,    0,    0,    0,    0,    0,   52,    0,   52,   52,
        4,    8,   10,   52,   14,   52,   29,   52,   52,   52,
       52,   41,   52,   52,   48,    0,   94,    0,    0,   95,
        0,   99,    0,   90,    0,    0,   52,    0,    1,   52,
       52,   52,   32,   33,   37,   52,   43,   52,    0,   94,
        0,   94,    0,    0,    0,   90,    0,    0,    0,    0,
       44,    0,    3,   13,   20,   52,   45,    0,   94,    0,
        0,    0,   87,    0,    0,    0,    0,   52,    0,   98,
        0,   87,    0,    0,    0,    0,   40,    0,   97,    0,
        0,   98,    0,    0,    0,    0,    0,   97,    0,   97,

        0,    0,    0,    0,    0,    0,   97,   86,    0,    0,
       82,   86,   88,    0,   88,    0,    0,   83,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    6,    7,    1,    1,    1,    8,    1,
        1,    9,   10,    1,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   15,   15,   16,    1,   17,
        1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
       25,   25,   26,   25,   25,   27,   25,   25,   28,   25,
       25,   29,   30,   31,   32,   33,   25,   34,   25,   25,
        1,   35,    1,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   25,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[61] =
    {   0,
        1,    2,    3,    2,    4,    1,    1,    5,    6,    1,
        1,    1,    7,    7,    7,    1,    1,    1,    8,    8,
        8,    8,    8,    8,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    1,    9,    8,    8,    8,    8,
        8,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9
    } ;

static yyconst flex_int16_t yy_base[552] =
    {   0,
        0,   59,   59,   60,   68,   73,   62,   86,   90,   96,
     1019, 1020, 1020, 1020,   68,  983,   91,   98,  111,  116,
     1001,  999,  997,    0,  995,  103,  975,  983,  974,  109,
      974,   47,  959,   91,   67,   64,   95,  959,  957,  956,
      968,   97,   62,   79,  117,   84,  955,  112,  109,  148,
      152,    0, 1020,  159, 1001, 1020,  999,  163,  168,  173,
      157,  966,  997,  186,    0,  202,   84, 1020,  163,  991,
      201,  203, 1020,  995,  206,  226,  239, 1020,  220,    0,
      259, 1020, 1020, 1020,    0,  970,  187,  961,  949,  962,
      946, 1020,  989,    0,  941,  936,  929,  933,  937,  932,

      948,  935,  929,  940,  925,  924,  940,  939,  918,  926,
      130,  161,  935,  919,  918,  931,  916,  925,  931,  923,
      930,  914,  915,  911,  912,  917,  905,  909,  147,  912,
      913,  913,  901,  229,  262,  276,  281,  910,  901,    0,
      185,  233, 1020,  951, 1020,  288,  292,  304,  309,  323,
      249,  917,    0,    0,  337,  915,  252, 1020,  942,  941,
      255,  940,  939, 1020,  333,  943, 1020,  337, 1020,  343,
      351,  354,    0,  915,  253, 1020,  286,  936,  362,  902,
      919,  885,    0,  892,  884,    0,  885,  890,  895,  882,
      157,  879,  896,  894,  883,  889,  874,  887,  890,  870,

      884,  887,  880,  866,  876,  879,  861,    0,  861,  870,
      862,  875,  858,  860,  241,  861,  856,  861,  868,  858,
      862,  850,  865,  867,  850,  327, 1020,  369,  853,  864,
      366,  850, 1020, 1020,  377,  891,  890,  379,  382, 1020,
      388,  394,  397,  874,  319, 1020,  888,  887,  391,  886,
      885,  853,    0,  850,  841,  836,  843,  846,    0,    0,
      831,  844,  834,  827,  835,    0,  830,  830,  839,  823,
      822,  823,  828,    0,  827,  816,  817,  834,  833,  824,
      827,  817,  825,  810,  815,  824,  812,  822,  821,  819,
      809,  814,  815,    0,  802,  809,  380,  302,  812,  809,

      803, 1020,  842, 1020,  841, 1020,  840,  409,  412,    0,
     1020, 1020,  406,  839,  838,  790,  824,  798,  805,  803,
      803,    0,  780,  790,  790,  795,  780,  781,    0,    0,
        0,  791,    0,  791,  790,    0,  770,  774,  789,  773,
      777,  776,    0,  781,  768,  769,  777,  783,  778,    0,
      769,  762,    0,  767,  381,  221,  394,  426,  767,  765,
      805, 1020,  804, 1020,  792, 1020,  788,    0,  755,  752,
      745,  724,  718,  708,    0,  704,    0,  710,  687,  705,
        0,    0,    0,  697,    0,    0,  680,  659,    0,    0,
      635,    0,  634,  646,  640,  620,  628,  429, 1020,  431,

      433,  447,  628,  617,  640,  600,  552,  554,  549,  548,
        0,    0,    0,  552,    0,  562,    0,  540,  558,  544,
      560,    0,  556,  544,    0,  450, 1020,  454,  468,  424,
      452, 1020,  471,  449,  558,  584,  550,  537,    0,  548,
      539,  529,    0,    0,    0,  525,    0,  521,  309, 1020,
      474,  466,  502,  472,  411,  488,  526,  485,  494,  493,
        0,  491,    0,    0,    0,  480,    0,  489,  487,  488,
      359,  490,  519,  471,  458,  461,  459,  438,  516, 1020,
      530,  443,  396,  382,  349,  326,    0,  538, 1020,  541,
      544,  491,  327,  310,  284,  279,  496, 1020,  558,  507,

      572,  239,  243,  232,  564,  574,  514,  269,  216,  218,
      579,  230,  194,  131,  158,   95,   27, 1020, 1020,  609,
      618,  627,  636,  645,  648,  650,  659,  668,  677,  686,
      695,  704,  707,  715,  724,  727,  732,  736,  744,  749,
      753,  757,  761,  769,  774,  778,  782,  786,  790,  794,
      802
    } ;

static yyconst flex_int16_t yy_def[552] =
    {   0,
      519,    1,  520,  520,    1,    1,  521,  521,  522,  522,
      519,  519,  519,  519,  523,  524,  519,  519,  519,  519,
      519,  519,  519,  525,  525,  525,  525,  525,  525,  519,
      526,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  519,
      519,  527,  519,  528,  519,  519,  519,  519,  519,  519,
      519,  529,  519,  529,  530,  519,  523,  519,  523,  519,
      531,  519,  519,  532,  519,  519,  519,  519,  519,  533,
      519,  519,  519,  519,  525,  525,  534,  535,  525,  525,
      525,  519,  519,  536,  519,  525,  525,  525,  525,  525,

      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  519,  519,  519,  519,  519,  519,  527,
      528,  528,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  529,  529,  530,  519,  519,  523,  519,  519,  519,
      519,  537,  538,  519,  519,  532,  519,  519,  519,  519,
      519,  519,  533,  525,  534,  519,  534,  519,  539,  525,
      525,  525,  536,  519,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,

      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  540,  541,  519,  519,  519,
      519,  519,  519,  525,  534,  519,  519,  519,  519,  542,
      543,  525,  525,  525,  519,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  544,  519,  519,  519,

      519,  519,  519,  519,  545,  519,  519,  519,  519,  525,
      519,  519,  519,  546,  547,  525,  525,  519,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  544,  519,  544,  519,  519,  519,
      548,  519,  519,  519,  549,  519,  519,  525,  525,  519,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  519,  519,  544,

      519,  519,  519,  519,  519,  550,  525,  519,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  525,  519,  519,  519,  544,  544,
      519,  519,  519,  519,  519,  519,  525,  519,  525,  525,
      525,  525,  525,  525,  525,  525,  525,  525,  519,  519,
      544,  544,  544,  551,  519,  519,  519,  519,  519,  519,
      525,  519,  525,  525,  525,  525,  525,  544,  544,  551,
      519,  551,  519,  519,  519,  519,  519,  525,  519,  519,
      551,  519,  519,  519,  519,  519,  525,  519,  519,  519,
      551,  551,  519,  519,  519,  519,  519,  519,  551,  551,

      551,  519,  519,  519,  519,  551,  551,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,    0,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519
    } ;

static yyconst flex_int16_t yy_nxt[1081] =
    {   0,
       12,   13,   14,   13,   13,   15,   12,   16,   12,   12,
       17,   18,   19,   20,   20,   21,   22,   23,   24,   24,
       24,   24,   24,   25,   24,   24,   26,   27,   24,   24,
       28,   24,   29,   24,   30,   31,   32,   33,   34,   35,
       36,   37,   24,   24,   38,   24,   39,   40,   41,   42,
       43,   24,   44,   45,   46,   47,   48,   49,   24,   24,
       50,   53,   53,  518,   56,   51,   63,   54,   54,   55,
       56,   12,   57,   68,   61,   56,   12,   57,   58,   51,
       59,   60,   60,   58,   96,   59,   60,   60,   56,   68,
       63,   66,   66,   66,   66,   97,   64,   66,   66,   66,

       66,   98,   69,   72,   72,   72,   73,  104,   87,   74,
       88,   92,  106,   93,  118,  120,  105,  119,   69,  121,
       64,   75,  107,   76,   76,   77,   75,  100,   81,   81,
       81,  108,   78,   79,  101,  115,  127,   78,   79,  109,
      102,  110,  517,  128,   80,  116,  103,  132,  130,  134,
       78,   79,  117,  136,  135,   78,   79,  122,  151,  515,
      123,  131,  133,  135,  137,  137,  137,  142,  157,   80,
      143,  124,  125,  516,  126,  146,  146,  146,  147,  200,
      148,  148,  149,  147,  201,  150,  150,  150,   92,   78,
       93,  220,  176,  519,   78,  515,  519,   69,  138,  202,

      221,   80,  139,  155,  155,  155,  155,   78,  160,  203,
      261,  262,   78,  161,  161,   72,   72,   72,  168,  168,
      168,  177,  398,  399,  164,  165,   80,  169,  170,  171,
      134,  512,  172,  172,  172,  135,   75,  156,   76,   76,
       77,  142,  164,  165,  143,  169,  170,   78,   79,   75,
      151,   77,   77,   77,  514,  135,  162,   68,  176,  163,
       78,   79,  234,  136,  513,   78,   79,  235,  235,   75,
      512,   81,   81,   81,  137,  137,  137,  136,   78,   79,
       78,   79,  226,  227,  510,  285,   69,  177,  137,  137,
      137,  245,  509,  228,  228,  228,  286,  508,   78,   79,

      146,  146,  146,  298,  231,  231,  231,  297,  138,  164,
      449,  450,  139,  169,  147,  505,  148,  148,  149,  147,
      177,  149,  149,  149,  176,   78,  139,  164,  226,  227,
       78,  169,  297,  147,  504,  150,  150,  150,  155,  155,
      155,  155,  238,   78,   78,  239,  239,  239,   78,  168,
      168,  168,  242,  177,  503,  243,  243,  243,  240,  241,
      479,  480,   78,  172,  172,  172,  172,  172,  172,  248,
      298,  502,  156,  496,  249,  249,  240,  241,  231,  231,
      231,  228,  228,  228,  302,  356,  356,  240,  495,  303,
      303,  239,  239,  239,  239,  239,  239,  308,  312,  400,

      309,  309,  309,  313,  313,  240,  243,  243,  243,  243,
      243,  243,  455,  362,  357,  357,  454,  250,  363,  363,
      251,  309,  309,  309,  309,  309,  309,  401,  357,  356,
      426,  427,  429,  430,  401,  494,  356,  493,  402,  402,
      402,  428,  428,  428,  482,  402,  402,  402,  431,  432,
      456,  426,  427,  431,  432,  449,  450,  454,  357,  433,
      433,  433,  428,  428,  428,  357,  428,  428,  428,  451,
      452,  356,  455,  356,  457,  451,  452,  471,  487,  356,
      453,  453,  453,  433,  433,  433,  453,  453,  453,  456,
      468,  469,  356,  471,  356,  481,  471,  497,  498,  458,

      357,  486,  357,  468,  469,  459,  472,  356,  357,  485,
      484,  483,  471,  457,  453,  453,  453,  488,  489,  471,
      482,  357,  472,  357,  472,  472,  478,  477,  490,  490,
      490,  491,  492,  476,  475,  471,  357,  474,  458,  488,
      489,  472,  497,  498,  459,  499,  500,  473,  472,  471,
      490,  490,  490,  490,  490,  490,  501,  501,  501,  499,
      500,  467,  466,  471,  472,  511,  511,  511,  511,  465,
      501,  501,  501,  506,  507,  506,  507,  471,  472,  471,
      511,  511,  511,  511,  501,  501,  501,  464,  463,  462,
      461,  364,  472,  460,  448,  447,  446,  445,  444,  443,

      442,  441,  440,  439,  438,  437,  472,  364,  472,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   70,   70,  304,   70,   70,
       70,   70,   70,   70,   85,   85,   85,   94,   94,  140,
      140,  435,  140,  140,  434,  140,  140,  140,  141,  141,
      425,  141,  141,  141,  141,  141,  141,  152,  152,  424,
      423,  152,  152,  152,  152,  152,  154,  422,  421,  420,
      154,  154,  154,  154,  154,  159,  159,  419,  159,  159,

      159,  159,  159,  159,  166,  166,  166,  166,  166,  166,
      166,  166,  166,  173,  173,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  178,  178,  418,  178,  178,  178,
      178,  178,  178,  183,  183,  183,  236,  417,  236,  236,
      237,  416,  237,  237,  247,  247,  415,  247,  247,  247,
      247,  247,  247,  305,  414,  305,  305,  307,  413,  307,
      307,  314,  412,  314,  314,  315,  411,  315,  315,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  361,  410,
      361,  361,  365,  409,  365,  365,  367,  408,  367,  367,
      405,  407,  405,  405,  406,  366,  406,  406,  436,  364,

      436,  436,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  362,  304,  404,  403,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  371,  370,  369,  368,  366,  364,  306,  304,  302,
      360,  359,  358,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  311,  311,  311,  311,  310,  306,  304,  301,

      300,  299,  296,  295,  294,  293,  292,  291,  290,  289,
      288,  287,  284,  283,  282,  281,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  246,  244,  167,  233,  233,  233,  233,
      232,  153,  144,  230,  229,  225,  224,  223,  222,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  189,  188,  187,  186,  185,
      184,   92,  182,  181,  180,  179,  174,  167,  158,  145,

      153,  145,  144,  129,  114,  113,  112,  111,   99,   95,
       91,   90,   89,   86,   84,   83,   82,   71,  519,   11,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519
    } ;

static yyconst flex_int16_t yy_chk[1081] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    3,    4,  517,    7,    2,    7,    3,    4,    5,
        5,    5,    5,   15,    6,    6,    6,    6,    5,    6,
        5,    5,    5,    6,   32,    6,    6,    6,    8,   67,
        8,    9,    9,    9,    9,   32,    7,   10,   10,   10,

       10,   32,   15,   17,   17,   17,   18,   35,   26,   18,
       26,   30,   36,   30,   43,   44,   35,   43,   67,   44,
        8,   19,   36,   19,   19,   19,   20,   34,   20,   20,
       20,   37,   19,   19,   34,   42,   46,   20,   20,   37,
       34,   37,  516,   46,   19,   42,   34,   49,   48,   50,
       19,   19,   42,   51,   50,   20,   20,   45,   61,  515,
       45,   48,   49,   61,   51,   51,   51,   54,   69,   19,
       54,   45,   45,  514,   45,   58,   58,   58,   59,  111,
       59,   59,   59,   60,  111,   60,   60,   60,   64,   59,
       64,  129,   87,  141,   60,  513,  141,   69,   51,  112,

      129,   59,   51,   66,   66,   66,   66,   59,   71,  112,
      191,  191,   60,   71,   71,   72,   72,   72,   75,   75,
       75,   87,  356,  356,   72,   72,   59,   75,   75,   79,
      134,  512,   79,   79,   79,  134,   76,   66,   76,   76,
       76,  142,   72,   72,  142,   75,   75,   76,   76,   77,
      151,   77,   77,   77,  510,  151,   71,  157,  175,   71,
       77,   77,  161,  135,  509,   76,   76,  161,  161,   81,
      508,   81,   81,   81,  135,  135,  135,  136,   77,   77,
       81,   81,  137,  137,  504,  215,  157,  175,  136,  136,
      136,  177,  503,  137,  137,  137,  215,  502,   81,   81,

      146,  146,  146,  298,  147,  147,  147,  298,  135,  146,
      449,  449,  135,  147,  148,  496,  148,  148,  148,  149,
      177,  149,  149,  149,  245,  148,  136,  146,  226,  226,
      149,  147,  226,  150,  495,  150,  150,  150,  155,  155,
      155,  155,  165,  148,  150,  165,  165,  165,  149,  168,
      168,  168,  170,  245,  494,  170,  170,  170,  168,  168,
      471,  471,  150,  171,  171,  171,  172,  172,  172,  179,
      228,  493,  155,  486,  179,  179,  168,  168,  231,  231,
      231,  228,  228,  228,  235,  297,  355,  231,  485,  235,
      235,  238,  238,  238,  239,  239,  239,  241,  249,  357,

      241,  241,  241,  249,  249,  231,  242,  242,  242,  243,
      243,  243,  455,  313,  297,  355,  455,  179,  313,  313,
      179,  308,  308,  308,  309,  309,  309,  358,  357,  430,
      398,  398,  400,  400,  401,  484,  400,  483,  358,  358,
      358,  398,  398,  398,  482,  401,  401,  401,  402,  402,
      434,  426,  426,  431,  431,  428,  428,  431,  430,  402,
      402,  402,  426,  426,  426,  400,  428,  428,  428,  429,
      429,  452,  433,  429,  434,  451,  451,  454,  478,  451,
      429,  429,  429,  433,  433,  433,  451,  451,  451,  456,
      468,  468,  469,  470,  468,  472,  492,  497,  497,  434,

      452,  477,  429,  453,  453,  434,  454,  453,  451,  476,
      475,  474,  500,  456,  453,  453,  453,  479,  479,  507,
      473,  469,  470,  468,  472,  492,  466,  462,  479,  479,
      479,  481,  481,  460,  459,  481,  453,  458,  456,  488,
      488,  500,  490,  490,  456,  491,  491,  457,  507,  491,
      488,  488,  488,  490,  490,  490,  491,  491,  491,  499,
      499,  448,  446,  499,  481,  505,  505,  505,  505,  442,
      499,  499,  499,  501,  501,  506,  506,  501,  491,  506,
      511,  511,  511,  511,  501,  501,  501,  441,  440,  438,
      437,  436,  499,  435,  424,  423,  421,  420,  419,  418,

      416,  414,  410,  409,  408,  407,  501,  406,  506,  520,
      520,  520,  520,  520,  520,  520,  520,  520,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  522,  522,  522,
      522,  522,  522,  522,  522,  522,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  524,  524,  405,  524,  524,
      524,  524,  524,  524,  525,  525,  525,  526,  526,  527,
      527,  404,  527,  527,  403,  527,  527,  527,  528,  528,
      397,  528,  528,  528,  528,  528,  528,  529,  529,  396,
      395,  529,  529,  529,  529,  529,  530,  394,  393,  391,
      530,  530,  530,  530,  530,  531,  531,  388,  531,  531,

      531,  531,  531,  531,  532,  532,  532,  532,  532,  532,
      532,  532,  532,  533,  533,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  535,  535,  387,  535,  535,  535,
      535,  535,  535,  536,  536,  536,  537,  384,  537,  537,
      538,  380,  538,  538,  539,  539,  379,  539,  539,  539,
      539,  539,  539,  540,  378,  540,  540,  541,  376,  541,
      541,  542,  374,  542,  542,  543,  373,  543,  543,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  545,  372,
      545,  545,  546,  371,  546,  546,  547,  370,  547,  547,
      548,  369,  548,  548,  549,  367,  549,  549,  550,  365,

      550,  550,  551,  551,  551,  551,  551,  551,  551,  551,
      551,  363,  361,  360,  359,  354,  352,  351,  349,  348,
      347,  346,  345,  344,  342,  341,  340,  339,  338,  337,
      335,  334,  332,  328,  327,  326,  325,  324,  323,  321,
      320,  319,  318,  317,  316,  315,  314,  307,  305,  303,
      301,  300,  299,  296,  295,  293,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  279,
      278,  277,  276,  275,  273,  272,  271,  270,  269,  268,
      267,  265,  264,  263,  262,  261,  258,  257,  256,  255,
      254,  252,  251,  250,  248,  247,  244,  237,  236,  232,

      230,  229,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  214,  213,  212,  211,  210,  209,  207,  206,
      205,  204,  203,  202,  201,  200,  199,  198,  197,  196,
      195,  194,  193,  192,  190,  189,  188,  187,  185,  184,
      182,  181,  180,  178,  174,  166,  163,  162,  160,  159,
      156,  152,  144,  139,  138,  133,  132,  131,  130,  128,
      127,  126,  125,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   99,   98,   97,   96,
       95,   93,   91,   90,   89,   88,   86,   74,   70,   63,

       62,   57,   55,   47,   41,   40,   39,   38,   33,   31,
       29,   28,   27,   25,   23,   22,   21,   16,   11,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519,
      519,  519,  519,  519,  519,  519,  519,  519,  519,  519
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[103] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 
    1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
#line 2 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
//                          Package   : omniidl
// idl.ll                   Created on: 1999/10/05
//			    Author    : Duncan Grisby (dpg1)
//
//    Copyright (C) 1999 AT&T Laboratories Cambridge
//
//  This file is part of omniidl.
//
//  omniidl is free software; you can redistribute it and/or modify it
//  under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//  General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//  02111-1307, USA.
//
// Description:
//   
//   Flex lexical analyser

// $Id: idl.ll,v 1.13.2.2 2005/01/06 23:11:14 dgrisby Exp $
// $Log: idl.ll,v $
// Revision 1.13.2.2  2005/01/06 23:11:14  dgrisby
// Big merge from omni4_0_develop.
//
// Revision 1.13.2.1  2003/03/23 21:01:48  dgrisby
// Start of omniORB 4.1.x development branch.
//
// Revision 1.9.2.8  2001/10/22 10:48:22  dpg1
// Cope with DOS line endings in all IDL situations.
//
// Revision 1.9.2.7  2001/10/17 16:48:32  dpg1
// Minor error message tweaks
//
// Revision 1.9.2.6  2001/06/13 11:28:20  dpg1
// Proper omniidl support for wchar/wstring constants.
//
// Revision 1.9.2.5  2001/03/13 10:32:10  dpg1
// Fixed point support.
//
// Revision 1.9.2.4  2000/11/01 12:45:55  dpg1
// Update to CORBA 2.4 specification.
//
// Revision 1.9.2.3  2000/10/27 16:31:07  dpg1
// Clean up of omniidl dependencies and types, from omni3_develop.
//
// Revision 1.9.2.2  2000/10/10 10:18:50  dpg1
// Update omniidl front-end from omni3_develop.
//
// Revision 1.7.2.8  2000/08/07 15:34:35  dpg1
// Partial back-port of long long from omni3_1_develop.
//
// Revision 1.7.2.7  2000/06/09 11:20:47  dpg1
// Last fix put __omni_pragma line numbers off by one...
//
// Revision 1.7.2.6  2000/06/08 14:58:19  dpg1
// Line numbers for #pragmas and // comments were off by one
//
// Revision 1.7.2.5  2000/06/08 14:36:19  dpg1
// Comments and pragmas are now objects rather than plain strings, so
// they can have file,line associated with them.
//
// Revision 1.7.2.4  2000/06/05 18:12:25  dpg1
// Support for __omni_pragma
//
// Revision 1.7.2.3  2000/04/26 09:55:48  dpg1
// cccp escapes characters like \ in line directives, so
// parseLineDirective() needs to use escapedStringToString().
//
// Revision 1.7.2.2  2000/03/06 15:03:49  dpg1
// Minor bug fixes to omniidl. New -nf and -k flags.
//
// Revision 1.7.2.1  2000/02/16 16:30:54  dpg1
// #pragma ID was misspelled #pragma id. Oops.
//
// Revision 1.7  2000/02/04 12:17:10  dpg1
// Support for VMS.
//
// Revision 1.6  1999/12/28 17:44:01  dpg1
// Stupid string allocation bug.
//
// Revision 1.5  1999/11/19 16:03:40  dpg1
// Flex scanner now accepts \r as whitespace.
//
// Revision 1.4  1999/11/05 10:36:42  dpg1
// Sorted out isatty() problems.
//
// Revision 1.3  1999/11/02 17:07:28  dpg1
// Changes to compile on Solaris.
//
// Revision 1.2  1999/11/01 10:05:00  dpg1
// New file attribute to AST.
//
// Revision 1.1  1999/10/27 14:06:00  dpg1
// *** empty log message ***
//

#define YY_NEVER_INTERACTIVE 1

#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <errno.h>

#include <idlerr.h>
#include <idlutil.h>
#include <idlrepoId.h>
#include <idlscope.h>
#include <idlexpr.h>
#include <idlast.h>

#include <y.tab.h>

char*       currentFile;
IDL_Boolean mainFile  = 1; // Are we processing the main file
int         nestDepth = 0; // #include nesting depth

char octalToChar(char* s);
char hexToChar(char* s);
char escapeToChar(char* s);
IDL_UShort octalToWChar(char* s);
IDL_UShort hexToWChar(char* s);
IDL_UShort escapeToWChar(char* s);
char* escapedStringToString(char* s);
IDL_UShort* escapedStringToWString(char* s);
void parseLineDirective(char* s);





#line 1033 "<stdout>"

#define INITIAL 0
#define comment 1
#define known_pragma 2
#define unknown_pragma 3
#define omni_pragma 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 164 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"


#line 1196 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 520 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1020 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 166 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return ABSTRACT;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 167 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return ANY;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 168 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return ATTRIBUTE;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 169 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return BOOLEAN;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 170 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return CASE;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 171 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return CHAR;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 172 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return CONST;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 173 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return CONTEXT;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 174 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return CUSTOM;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 175 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return DEFAULT;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 176 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return DOUBLE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 177 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return ENUM;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return EXCEPTION;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 179 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return FACTORY;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 180 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return FALSE_;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 181 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return FIXED;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 182 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return FLOAT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 183 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return IN;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 184 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return INOUT;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return INTERFACE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return LOCAL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 187 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return LONG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 188 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return MODULE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 189 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return NATIVE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 190 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return OBJECT;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 191 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return OCTET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 192 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return ONEWAY;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 193 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return OUT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 194 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return PRIVATE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 195 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return PUBLIC;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 196 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return RAISES;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 197 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return READONLY;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 198 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return SEQUENCE;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 199 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return SHORT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 200 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return STRING;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 201 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return STRUCT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 202 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return SUPPORTS;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 203 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return SWITCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 204 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return TRUE_;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return TRUNCATABLE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 206 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return TYPEDEF;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 207 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return UNION;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 208 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return UNSIGNED;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 209 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return VALUEBASE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 210 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return VALUETYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 211 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return VOID;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 212 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return WCHAR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 213 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return WSTRING;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 215 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return LEFT_SHIFT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 216 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return RIGHT_SHIFT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 217 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
return SCOPE_DELIM;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 219 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.id_val = idl_strdup(yytext);
  return IDENTIFIER;
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 224 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.id_val = idl_strdup(yytext);
  return IDENTIFIER;
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 229 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 10);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 239 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 8);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 249 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  errno = 0;
  yylval.int_literal_val = idl_strtoul(yytext, 16);
  if (errno == ERANGE) {
    IdlError(currentFile, yylineno,
	     "Integer literal '%s' is too big", yytext);
  }
  return INTEGER_LITERAL;
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.int_literal_val = 0;
  return INTEGER_LITERAL;
}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 264 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.char_val = yytext[1];
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 269 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = octalToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 275 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = hexToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 281 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  IdlError(currentFile, yylineno,
	   "\\u may only be used in wide characters and strings");
  yylval.char_val = 0;
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 288 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.char_val = escapeToChar(yytext + 1);
  return CHARACTER_LITERAL;
}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 294 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.wchar_val = yytext[2];
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 299 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = octalToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 305 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = hexToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 311 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = hexToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 317 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wchar_val = escapeToWChar(yytext + 2);
  return WIDE_CHARACTER_LITERAL;
}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 323 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  // Only deal with floats in INITIAL state, so version pragmas don't
  // get interpreted as floats.
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 330 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 335 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.float_literal_val = idl_strtod(yytext);
  return FLOATING_PT_LITERAL;
}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 340 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.string_val = escapedStringToString(yytext + 1);
  return STRING_LITERAL;
}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 346 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yytext[yyleng-1] = '\0';
  yylval.wstring_val = escapedStringToWString(yytext + 2);
  return WIDE_STRING_LITERAL;
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 352 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 357 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 362 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.fixed_val = new IDL_Fixed(yytext, currentFile, yylineno);
  return FIXED_PT_LITERAL;
}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 367 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ Comment::add(yytext, currentFile, yylineno-1); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 369 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  Comment::add(yytext, currentFile, yylineno);
  BEGIN(comment);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 374 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 375 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 376 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ Comment::append(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 377 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ Comment::append(yytext); BEGIN(INITIAL); }
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 379 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(omni_pragma);
  return OMNI_PRAGMA;
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 384 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(INITIAL);
  return END_PRAGMA;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 389 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 393 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 399 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_PREFIX;
}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 404 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_ID;
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 409 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(known_pragma);
  return PRAGMA_VERSION;
}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 414 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ /* Eat spaces and tabs */ }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 416 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(unknown_pragma);
  return PRAGMA;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 421 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  yylval.string_val = idl_strdup(yytext);
  return UNKNOWN_PRAGMA_BODY;
}
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 426 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  /* Continue line if it ends with \ */
}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 430 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  BEGIN(INITIAL);
  return END_PRAGMA;
}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 435 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 439 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 443 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 447 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 451 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 455 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  parseLineDirective(yytext);
}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 459 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{ /* Eat white space */ }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 461 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
{
  return yytext[0];
}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 465 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"
ECHO;
	YY_BREAK
#line 1965 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(known_pragma):
case YY_STATE_EOF(unknown_pragma):
case YY_STATE_EOF(omni_pragma):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 520 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 520 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 519);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 465 "/home/stefan/projects/Synopsis-repository/trunk/Synopsis/Parsers/IDL/idl.ll"



char octalToChar(char* s) {
  unsigned long ret = strtoul(s+1, 0, 8);

  if (ret > 255) {
    IdlError(currentFile, yylineno, "Octal character value '%s' too big", s);
  }

  return ret;
}

char hexToChar(char* s)  {
  unsigned long ret = strtoul(s+2, 0, 16);

  return ret;
}

char escapeToChar(char* s) {
  switch (s[1]) {
  case 'n':  return '\n';
  case 't':  return '\t';
  case 'v':  return '\v';
  case 'b':  return '\b';
  case 'r':  return '\r';
  case 'f':  return '\f';
  case 'a':  return '\a';
  case '\\': return '\\';
  case '?':  return '?';
  case '\'': return '\'';
  case '\"': return '\"';
  }
  IdlWarning(currentFile, yylineno,
	     "Behaviour for escape sequence '%s' is undefined by IDL; "
	     "using '%c'", s, s[1]);
  return s[1];
}

IDL_UShort octalToWChar(char* s) {
  unsigned long ret = strtoul(s+1, 0, 8);

  if (ret > 255) { // This really is meant to be 255
    IdlError(currentFile, yylineno, "Octal character value '%s' too big", s);
  }

  return ret;
}

IDL_UShort hexToWChar(char* s) {
  unsigned long ret = strtoul(s+2, 0, 16);

  return ret;
}

IDL_UShort escapeToWChar(char* s) {
  switch (s[1]) {
  case 'n':  return '\n';
  case 't':  return '\t';
  case 'v':  return '\v';
  case 'b':  return '\b';
  case 'r':  return '\r';
  case 'f':  return '\f';
  case 'a':  return '\a';
  case '\\': return '\\';
  case '?':  return '?';
  case '\'': return '\'';
  case '\"': return '\"';
  }
  IdlWarning(currentFile, yylineno,
	     "Behaviour for escape sequence '%s' is undefined by IDL; "
	     "using '%c'.", s, s[1]);
  return s[1];
}

char* escapedStringToString(char* s) {
  int   len = strlen(s);
  char* ret = new char[len+1];
  char  tmp[8];

  int from, to, i;

  for (from=0, to=0; from < len; from++, to++) {

    if (s[from] == '\\') {
      tmp[0] = s[from++];

      if ('0' <= s[from] && s[from] <= '7') {
	// Octal
	for (i=1;
	     i < 4 && from < len && '0' <= s[from] && s[from] <= '7';
	     from++, i++) tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = octalToChar(tmp);
	from--;
      }
      else if (s[from] == 'x') {
	// Hex
	tmp[1] = s[from++];
	for (i=2; i < 4 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToChar(tmp);
	from--;
      }
      else if (s[from] == 'u') {
	// Wide hex not allowed
	IdlError(currentFile, yylineno,
		 "\\u may only be used in wide characters and strings");
	ret[to] = '!';
      }
      else {
	tmp[1]  = s[from];
	tmp[2]  = '\0';
	ret[to] = escapeToChar(tmp);
      }
      if (ret[to] == '\0') {
	IdlError(currentFile, yylineno, "String cannot contain \\0");
	ret[to] = '!';
      }
    }
    else ret[to] = s[from];
  }
  ret[to] = '\0';
  return ret;
}

IDL_UShort* escapedStringToWString(char* s) {
  int         len = strlen(s);
  IDL_UShort* ret = new IDL_UShort[len+1];
  char        tmp[8];

  int from, to, i;

  for (from=0, to=0; from < len; from++, to++) {

    if (s[from] == '\\') {
      tmp[0] = s[from++];

      if ('0' <= s[from] && s[from] <= '7') {
	// Octal
	for (i=1;
	     i < 4 && from < len && '0' <= s[from] && s[from] <= '7';
	     from++, i++) tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = octalToWChar(tmp);
	from--;
      }
      else if (s[from] == 'x') {
	// Hex
	tmp[1] = s[from++];
	for (i=2; i < 4 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToWChar(tmp);
	from--;
      }
      else if (s[from] == 'u') {
	// Wide hex
	tmp[1] = s[from++];
	for (i=2; i < 6 && from < len && isxdigit(s[from]); from++, i++)
	  tmp[i] = s[from];

	tmp[i]  = '\0';
	ret[to] = hexToWChar(tmp);
	from--;
      }
      else {
	tmp[1]  = s[from];
	tmp[2]  = '\0';
	ret[to] = escapeToWChar(tmp);
      }
      if (ret[to] == 0) {
	IdlError(currentFile, yylineno,
		 "Wide string cannot contain wide character zero");
	ret[to] = '!';
      }
    }
    else
      ret[to] = s[from];
  }
  ret[to] = 0;
  return ret;
}

void parseLineDirective(char* s) {
  char* file    = new char[strlen(s) + 1];
  long int line = 0, mode = 0;
  int cnt       = sscanf(s, "# %ld \"%[^\"]\" %ld", &line, file, &mode);
  if (cnt == 0)
    // Retry with a real "#line" directive.
    cnt = sscanf(s, "#line %ld \"%[^\"]\" %ld", &line, file, &mode);
  assert(cnt >= 1);

  if (cnt > 1) {
    if (cnt == 3) {
      if (mode == 1) {
	// New #included file
	++nestDepth;
	mainFile = 0;
	Prefix::newFile();
      }
      else if (mode == 2) {
	// Return from #include
	if (--nestDepth == 0) mainFile = 1;
	Prefix::endFile();
      }
    }
    delete [] currentFile;
    // cccp escapes \ characters, so use the normal string parser
    currentFile = escapedStringToString(file);
    delete [] file;
    if (mainFile)
      AST::tree()->setFile(currentFile);
  }
  yylineno = line;
}

#ifdef __VMS
// Some versions of DEC C++ for OpenVMS set the module name used by the
// librarian based on the last #line encountered.
#line 3193 "lex_yy.cc"
#endif
