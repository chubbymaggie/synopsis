#!/usr/bin/env python
#
# $Id: gen-emulations,v 1.1 2002/08/22 12:21:41 chalky Exp $
#
# This file is a part of Synopsis.
# Copyright (C) 2002 Stephen Davies
#
# Synopsis is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
# 02111-1307, USA.

# This script finds compilers in the system and generates a file containing
# the info for Synopsis. The generated file should be installed as
# $pythonlib/site-packages/Synopsis/ConfigCxx.py (??)

import sys, os, re, string

usage = \
"""Usage: gen-emulations <output-filename> <compiler1> <compiler2> ..."""

def main():
    """The main function - parses the arguments and controls the program"""
    if len(sys.argv) < 3:
	print usage
	return

    filename = sys.argv[1]
    print "Filename is ", filename
    compilers = sys.argv[2:]
    print "compilers are:", compilers

    for compiler in compilers:
	find_compiler_info(compiler)

re_specs = re.compile('^Reading specs from (.*/)lib/gcc-lib/(.*)/([0-9]+\.[0-9]+\.[0-9]+)/specs$')

def find_compiler_info(compiler):
    print "Finding info for '%s'"%compiler

    # Run the compiler with -v and get first line to stderr (assumes gcc!!!)
    cin, out,err = os.popen3(compiler + " -v")
    version = err.readline().rstrip()
    cin.close()
    out.close()
    err.close()

    # Parse the first line for the 'specs' path - all the info we need is in
    # the path
    mo = re_specs.match(version)
    if not mo:
	print "Warning: unrecognised version string '%s'"%version
	return
    prefix, hosttype, version = mo.groups()

    # Construct a list of include paths
    paths = []
    # The version-specific dir
    paths.append('%slib/gcc-lib/%s/%s/include'%(prefix, hosttype, version))
    # For some reason (Debian?) has 2.x as g++-3 and 3.x as g++-v3
    if version[0] == '3':
	paths.append(prefix + 'include/g++-v3')
	paths.append(prefix + 'include/g++-v3/bits')
    else:
	paths.append(prefix + 'include/g++-3')
	paths.append(prefix + 'include/g++-3/bits')
    # The prefix include
    paths.append(prefix + 'include')
    # The /usr/include if different
    if prefix != '/usr/':
	paths.append('/usr/include')

    print "Include paths:\n "+string.join(paths,'\n ')
    


if __name__ == '__main__': main()

