#!/usr/bin/env python
# $Id: synopsis,v 1.3 2003/12/05 19:43:53 stefan Exp $
#
# Copyright (C) 2003 Stefan Seefeld
# All rights reserved.
# Licensed to the public under the terms of the GNU LGPL (>= 2),
# see the file COPYING for details.
#

from Synopsis import config
from Synopsis import AST
from Synopsis.Processor import Processor, Composite

import sys, os, os.path, string, getopt

def _import(package, module, processor, verbose=False):
   """import a processor as <package>.<module>.<processor>,
   i.e. as the equivalent to 'from <package>.<module> import <processor>"""

   try:
      mod = __import__(string.join([package, module], '.'))

   except ImportError, msg:
      if 'verbose' in kwds:
         print 'Unable to import %s'%string.join([package, module], '.')
         print 'Reason :', msg
      else:
         print 'Error : no processor \'%s\'', name[-1]
      sys.exit(-1)

   name = string.join([package, module], '.')
   if processor: name = string.join([name, processor], '.')
   components = string.split(name, '.')
   for c in components[1:]:
      try:
         mod = getattr(mod, c)
      except AttributeError, msg:
         print "Error: Unable to find %s in:\n%s"%(c, repr(mod))
         sys.exit(-1)

   return mod

def usage():
   """Print a little usage text"""

   print 'Usage : %s [options] <input files>'%sys.argv[0]
   print """
List of options:

  -h, --help             help
  -V, --version          print version info and exit
  -v  --verbose          operate verbosely
  -d  --debug            operate in debug mode
  -o, --output           output file / directory
  -p, --parser           Select a parser
  -Wp,<arg>[,<arg>...]   Send args to the parser
  -l, --linker           Link
  -Wl,<arg>[,<arg>...]   Send args to the linker
  -f, --formatter        Select a formatter
  -Wf,<arg>[,<arg>...]   Send args to the formatter
  -I <path>              Specify include path
  -D <macro>             Specify macro for the parser
"""
   
def get_opt(argv):
   """Parse command line options and translate them to
   processor commands and arguments."""

   parser = None
   parser_opts = {}
   linker = None
   linker_opts = {}
   formatter = None
   formatter_opts = {}
   options = {}
   help = False

   opts, args = getopt.getopt(argv,
                              'o:p:l:f:I:D:W:vhVd',
                              ['output=',
                               'parser=', 'linker=', 'formatter=',
                               'version', 'help', 'verbose'])

   for o, a in opts:
      if o == '-v' or o == '--version':
         print 'synopsis version %s'%config.version
         sys.exit(0)
         
      if o == '--verbose':
         options['verbose'] = True

      elif o == '-o' or o == '--output':
         options['output'] = a

      elif o == '-p' or o == '--parser':
         parser = _import('Synopsis.Parsers', a, 'Parser',
                          'verbose' in options)

      elif o == '-l' or o == '--linker':
         linker = _import('Synopsis.Processors', 'Linker',
                          'verbose' in options)
         print 'a', a
         if a:
            linker_opts['processors'] = map(lambda x: _import('Synopsis.Processors', x, x,
                                                              'verbose' in options)(),
                                            string.split(a, ','))

      elif o == '-f' or o == '--formatter':
         formatter = _import('Synopsis.Formatters', a, 'Formatter',
                             'verbose' in options)

      elif o == '-I':
         if not parser_opts.get('cppflags'): parser_opts['cppflags'] = []
         parser_opts['cppflags'].append('-I%s'%a)

      elif o == '-D':
         if not parser_opts.get('cppflags'): parser_opts['cppflags'] = []
         parser_opts['cppflags'].append('-D%s'%a)

      elif o == '-W':
         if a[0] == "p":
            parser_opts.extend(string.split(a[2:], ","))
         elif a[0] == "l":
            linker_opts.extend(string.split(a[2:], ","))
         elif a[0] == "f":
            formatter_opts.extend(string.split(a[2:], ","))

      elif o == '-h' or o == '--help':
         help = True

   if help:
      for p in parser, linker, formatter:
         if not p: continue
         processor = p()
         print "Parameters for processor '%s':"%p.__module__
         parameters = processor.get_parameters()
         tab = max(map(lambda x:len(x), parameters.keys()))
         for p in parameters:
            print "   %-*s     %s"%(tab, p, parameters[p].doc)
      if not (parser or linker or formatter):
         usage()
      sys.exit(0)

   options['input'] = args

   #now instantiate the processor
   processors = []
   if parser:
      processors.append(parser(**parser_opts))
   if linker:
      processors.append(linker(**linker_opts))
   if formatter:
      processors.append(formatter(**formatter_opts))
   processor = Composite(*processors, **options)

   return processor

def main():
   processor = get_opt(sys.argv[1:])
   processor.process(AST.AST())

if __name__ == '__main__':
   main()
