/*$Id: Types.idl,v 1.1 2001/01/08 14:06:05 chalky Exp $
 *
 * This source file is a part of the Berlin Project.
 * Portions Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * Portions Copyright (C) 1999 Graydon Hoare <graydon@pobox.com> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Types_idl
#define _Types_idl

// !!!FIXME!!! this should become long long when it works
typedef unsigned long Time; 

typedef unsigned long Tag;
typedef double Coord;
typedef long PixelCoord;
enum Axis { xaxis, yaxis, zaxis };

struct Vertex 
{
  Coord x, y, z;
};

typedef double Alignment;

struct Color
{
  double red, green, blue;
  double alpha;
};

// typedef sequence<Vertex> ControlPoints;
// typedef sequence<double> EvalMesh;

typedef sequence<Vertex> Path;
// struct Path
// {
//   ControlPoints p;
//   EvalMesh m; // might be 0-length, in which case path is lines
// };

// struct Patch
// {
//   ControlPoints p;
//   EvalMesh m; // might be 0-length, in which case patch is quads
  
//   // the strides define the width of a row, since the above sequences
//   // are flattened 2-dimeesional arrays.
  
//   long meshStride, controlStride;
// };

// this is a character in the unicode range U+0000 - U+FFFF. It is a
// coded representation of a "unit" of textual information. it is not
// a picture on a screen, nor a particular semantic value. it is only
// meaningful in the context of an application, a locale, and a human
// reader of a particular language.

typedef unsigned short Unichar;

// this is a sequence of unichars. they have a logical memory ordering
// which corresponds to the sequence in which they are entered into a
// computer, over time, by a human or other process. Even if they are
// in a right-to-left writing system, they always go in this order
// when considered as characters. Only when transformed to glyphs do
// they get special layout properties like screen direction.

typedef sequence<Unichar> Unistring;

struct NVPair 
{
  Unistring name;
  any val;
};


#endif /* _Types_idl */
