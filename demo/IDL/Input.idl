/*$Id: Input.idl,v 1.1 2000/08/01 03:28:26 stefan Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Input_idl
#define _Input_idl

#include <Types.idl>

module Input
{
  typedef unsigned long Device;
  //. the device id. Each logical device has a unique id attached to it
  //. which is used by events, focus etc.
  typedef unsigned long Bitset;
  //. a set of flags
  struct Toggle
  //. the generalization of keys and mouse buttons
  {
    enum type {press, hold, release} actuation;
    unsigned long number;
  };
  typedef Vertex        Position;
  //. positional events have one...
  typedef double        Value;
  //. also possible: simple value input
  enum Discriminator { telltale, key, button, positional, valuation};
  //. the actual attributes; the concrete type is discriminated by these
  union Payload switch (Discriminator)
  //. the data associated with these attributes
  {
  case telltale: Bitset state;
  case key: Toggle kselection;
  case button: Toggle bselection;
  case positional: Position location;
  case valuation: Value val;
  };

  struct Item
  //. each item contains a device id and an attribute
  {
    Device dev;
    Payload attr;
  };
  typedef sequence<Input::Item> Event;
  //. an event is simply a list of items
  interface Filter
  //. An event filter controls the routing of events
  {
    boolean handle(in Event e);
  };
};

#endif /* _Input_idl */
