#! /usr/bin/env python

from Synopsis import config
from Synopsis.process import process
from Synopsis.Processor import *
from Synopsis.Processors import *
from Synopsis.Parsers import Python
from Synopsis.Parsers import Cxx
from Synopsis.Formatters import HTML
from Synopsis.Formatters.HTML.FileLayout import *
from Synopsis.Formatters.HTML.TreeFormatterJS import *
from Synopsis.Formatters.HTML import Comments
from Synopsis.Formatters.HTML.Views import *
from Synopsis.Formatters import SXR
from Synopsis.Formatters import Texinfo
from Synopsis.Formatters import Dump

from distutils import sysconfig
import sys, os, os.path

srcdir = '@srcdir@'
topdir = '@topdir@'
python = Composite(Python.Parser(basename = topdir + os.sep),
                   JavaTags(),
                   Summarizer())

cxx = Cxx.Parser(base_path = topdir + os.sep,
                 cppflags = ['-I%s'%(topdir + '/include'),
                             '-I%s'%(sysconfig.get_python_inc())],
                 syntax_prefix='links',
                 xref_prefix='xref')

cxx_processor = Linker(SSDComments(),
                       JavaTags(),
                       Summarizer())

class MyHTML(HTML.Formatter):
   """We have to subclass in order to be able to make the 'xref_file'
   parameter of the XRef view accessible to the command line"""

   xref = Parameter('', 'xref file usef for cross referencing')
    
   def process(self, ast, **kwds):
        
      self.set_parameters(kwds)

      toc_out = 'links.toc',
      file_layout = NestedFileLayout(),
      tree_formatter = TreeFormatterJS(),
      comment_formatters = [Comments.Javadoc(), Comments.Section()],
      self.views = [FramesIndex(),
                    Scope(),
                    Source(prefix = 'links',
                           toc_in = ['links.toc']),
                    XRef(xref_file = self.xref),
                    ModuleListing(),
                    ModuleIndexer(),
                    FileListing(),
                    FileIndexer(),
                    FileDetails(),
                    InheritanceTree(),
                    InheritanceGraph(),
                    NameIndex()]
      
      return HTML.Formatter.process(self, ast)

sxr = SXR.Formatter(url = '/sxr.cgi',
                    src_dir = '@topdir@',
                    exclude = ['build', 'demo', 'doc', 'share', 'debian',
                               '.svn', 'autom4te.cache',
                               '*.pyc', '*.so', '*~'],
                    xref_prefix='xref',
                    syntax_prefix='links',
                    sxr_template = os.path.join(srcdir, 'sxr-template.html'))

process(python = python,
        cxx = cxx,
        link_python = Linker(),
        link_cxx = cxx_processor,
        link = Linker(),
        archive = Processor(),
        strip = Stripper(),
        xref = XRefCompiler(prefix='xref'),
        html = MyHTML(),
        sxr = sxr,
        dump = Dump.Formatter(),
        texi = Texinfo.Formatter())
