<section>
  <title>Module Config.py</title>
  <para>Configuration script module.
  There are a large number of command line options to control Synopsis, but
  there are many more options than it is feasable to implement in this fashion.
  Rather, Synopsis opts for the config file approach if you want full control
  over the process.</para><para><emphasis>The problem</emphasis>
  Synopsis is very modular, and it is desirable to separate the options from
  different modules - something achieved by the -W flag. The modules form a
  hierarchical structure however, with up to three levels of depth. Some modules
  are used rarely, and the user may want different sets of settings depending on
  what they are doing - eg: generating HTML or Docbook, parsing different
  sections of the code, etc. We tossed about various ideas of representing
  options in an related way, and came up with the idea of a Python script that
  builds an object hierarchy that mirrors that of the modules.</para><para><emphasis>The Config Script</emphasis>
  A config script is specified by passing the -c option to 'synopsis'. Options may
  be passed to the script via the -Wc option, as key=value pairs. For example:</para><para><programlisting>synopsis -c config.py -Wc,formatter=C++</programlisting></para><para>The script is interpreted as a Python source file, and the only requirement is
  that once loaded it have a global object called Config. This Config object is
  usually a class which is constructed with the options dictionary to retrieve an
  object with nested configuration objects. Every config object has at least one
  attribute 'name', which identifies the module the object configures.</para><para>If no config script is specified on the command line, the default class Base
  is used, defined in this Config module. It is recommended that the Config
  class in your config script derive from this Base class to extend it as you
  wish.</para><para><emphasis>Modules</emphasis>
  In many places modules or lists of modules can be specified to perform tasks.
  These may be selected in one of four ways: 
      
  1. From a list of built-in defaults for that task as a simple string (depends
  on attribute), </para><para>2. As a member of a module or package as a simple string (depends on
  attribute),</para><para>3. From anywhere via a tuple of two strings: (module, class-name); for
  example, to use the provided DOxygen Scope Sorter, you specify
  ('Synopsis.Formatter.HTML.doxygen', 'DOScopeSorter') or to use your own
  something like ('mymodules.py', 'ScopeSorter') - Note that ending the first
  string in '.py' forces it to be loaded from a file, something which cannot be
  achieved using the next method:</para><para>4. From anywhere via an absolute dotted reference, eg:
      'Synopsis.Formatter.HTML.doxygen.DOScopeSorter'.</para><para>Of these methods, 1 or 2 are preferable for brevity and 4 for absolute
  references, unless a filename is needed in which case you need 3.
  </para>
  <itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Config.Base </para></listitem>
  </itemizedlist>
</section><section>
  <title>Class Base</title><para>The base class for configuration objects. 
      If no config script is specified on the command line, then this class is
      instantiated directly.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>parser</term><listitem><para>The parser config object to use, or None if no parsing should be done. This attribute is set by __init__()</para></listitem>
    </varlistentry><varlistentry>
      <term>linker</term><listitem><para>The linker config object to use, or None if no linking should be done. This attribute is set by __init__()</para></listitem>
    </varlistentry><varlistentry>
      <term>formatter</term><listitem><para>The formatter config object to use, or None if no formatting should be done. This attribute is set by __init__()</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Base.__init__() </para></listitem>
  </itemizedlist>
</section><section>
  <title>Class Base::Parser</title><para>Contains nested classes for the different Parser modules.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>modules</term><listitem><para>a dictionary mapping names to config objects. This dictionary may be used to select an object from a command line option. </para></listitem>
    </varlistentry>
  </variablelist>
</section><section>
  <title>Parser class IDL</title><para>Config object for the IDL parser.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>name</term><listitem><para>Name of this config object: 'IDL'</para></listitem>
    </varlistentry><varlistentry>
      <term>verbose</term><listitem><para>Verbosity flag. This attribute is set by __init__(), but only if 'verbose' was passed as a config option.</para></listitem>
    </varlistentry><varlistentry>
      <term>main_file</term><listitem><para>Flag that selects if should only store the AST generated from the file(s) being processed, and not included files. This attribute is true by default.</para></listitem>
    </varlistentry><varlistentry>
      <term>basename</term><listitem><para>A file path to strip from the start of all filenames before storing. Setting this option will for example remove any redundant parent directories in the HTML FileTree page.</para></listitem>
    </varlistentry><varlistentry>
      <term>include_path</term><listitem><para>A list of strings, each specifying a path to add to the include path. For example: ['/usr/local/corba/']</para></listitem>
    </varlistentry><varlistentry>
      <term>keep_comments</term><listitem><para>If set to true (ie: 1) then comments are kept in the documentation. This is true by default.</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Parser.IDL </para></listitem>
  </itemizedlist>
</section><section>
  <title>Parser class CXX</title><para>Config object for the C++ parser.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>name</term><listitem><para>Name of this config object: 'C++'</para></listitem>
    </varlistentry><varlistentry>
      <term>verbose</term><listitem><para>Verbosity flag. This attribute is set by __init__(), but only if 'verbose' was passed as a config option.</para></listitem>
    </varlistentry><varlistentry>
      <term>main_file</term><listitem><para>Flag that selects if should only store the AST generated from the file(s) being processed, and not included files. This attribute is set by __init__ always</para></listitem>
    </varlistentry><varlistentry>
      <term>basename</term><listitem><para>A file path to strip from the start of all filenames before storing. Setting this option for example will remove any redundant parent directories in the HTML FileTree page.</para></listitem>
    </varlistentry><varlistentry>
      <term>include_path</term><listitem><para>A list of strings, each specifying a path to add to the include path. For example: ['/usr/local/corba/']</para></listitem>
    </varlistentry><varlistentry>
      <term>defines</term><listitem><para>A list of strings, each specifying a define to pass to the preprocessor. For example: ['FOO', 'BAR=true']</para></listitem>
    </varlistentry><varlistentry>
      <term>preprocessor</term><listitem><para>Which preprocessor to use. Not setting this causes the builtin ucpp to be used, which can track macro expansions when doing SXR stuff. Setting it to 'gcc' will cause gcc (well, really g++) to be used instead.</para></listitem>
    </varlistentry><varlistentry>
      <term>extract_tails</term><listitem><para>If set to true, then the parser will look for trailing comments before close braces. If it finds them, it will create dummy declarations to hold the comments. If you set this, you should probably also use the 'dummy' or 'prev' comment processors in the Linker options.</para></listitem>
    </varlistentry><varlistentry>
      <term>storage</term><listitem><para>If set, this must be a string which defines the file to store links into. Setting this also causes the parser to look more carefully at the input file, so that it can generate the links from inside blocks of code (otherwise it skips over them). Note that you usually set this from the command-line with your Makefile via "-Wp,-s,$@.links" or something.</para></listitem>
    </varlistentry><varlistentry>
      <term>fake_std</term><listitem><para>If set, this causes the parser to construct a fake using directive from the std namespace to the global namespace. In effect, this fixes problems seen with using the stdc++ headers for gcc 2.95.x where most things dont get placed in the std namespace.</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Parser.C++.__init__ </para></listitem>
  </itemizedlist>
</section><section>
  <title>Parser class Python</title><para>Config object for the Python parser.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>name</term><listitem><para>Name of this config object: 'Python'</para></listitem>
    </varlistentry><varlistentry>
      <term>verbose</term><listitem><para>Verbosity flag. This attribute is set by __init__(), but only if 'verbose' was passed as a config option.</para></listitem>
    </varlistentry><varlistentry>
      <term>main_file</term><listitem><para>Flag that selects if should only store the AST generated from the file(s) being processed, and not included files. This attribute is set by __init__ always</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Parser.Python </para></listitem>
  </itemizedlist>
</section><section>
  <title>Class Base::Linker</title><para>Contains nested classes for the Linker modules. Currently there is
          just Linker.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>modules</term><listitem><para>Dictionary mapping names to nested classes</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Linker</para></listitem><listitem><para>Synopsis.Linker.Linker The main linker module</para></listitem><listitem><para>Synopsis.Linker.Comments The comment linker module </para></listitem>
  </itemizedlist>
</section><section>
  <title>Linker class Linker</title><para>Config for the main linker module. The linker performs various
              options on an AST, including some which are essential when merging
              multiple AST's.
  </para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>verbose</term><listitem><para>Boolean value indicating whether to print extra information on what's going on. Can be useful for debugging problems</para></listitem>
    </varlistentry><varlistentry>
      <term>strip</term><listitem><para>A list of strings, where each string is a scoped name to strip from the front of declarations. If this list is not empty, any declaration not matching one of the strip names will be removed from the AST. The default is [], but an example is ['boost::python'].</para></listitem>
    </varlistentry><varlistentry>
      <term>mapper_list</term><listitem><para>A list of mappers (?)</para></listitem>
    </varlistentry><varlistentry>
      <term>max_access</term><listitem><para>Maximum access level to permit - any declaration with a lower accessibility (higher access level) will be removed. The default is None, which disables the operation. Possible values are 1 for public (only public members shown), 2 for protected (only public and protected shown)</para></listitem>
    </varlistentry><varlistentry>
      <term>map_declaration_names</term><listitem><para>Prepends some namespace onto each name in the AST. This is used for example by the Synopsis RefManual to place all C++ code in the Synopsis.Parser.C++ package. The value should be a tuple of two strings - the namespace separated by ::'s and the type of module to use (eg: Module or Package). The default value is None.</para></listitem>
    </varlistentry><varlistentry>
      <term>map_declaration_type</term><listitem><para>The type (string) of the declarations inserted when mapping declarations.</para></listitem>
    </varlistentry><varlistentry>
      <term>operations</term><listitem><para>The list of operations to perform on the AST. The default is ['Unduplicator', 'Stripper', 'NameMapper', 'Comments', 'EmptyNS', 'AccessRestrictor']. Others include 'LanguageMapper' and 'XRefCompiler'. </para></listitem>
    </varlistentry>
  </variablelist>
</section><section>
  <title>Linker class Linker::XRefCompiler</title><para>This is the config object for the XRefCompiler module.</para><para>                XRefCompiler compiles the text-based xref files generated by
                  the C++ parser into a single pickled python datastructure.
                  This data structure can then be used by HTML formatter for
                  generating cross-reference info, or by external search tools.
                  </para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>xref_path</term><listitem><para>A string with one %s, which when replaced with the 'filename()' attribute of a declaration (ie: filename with the basepath stripped from it by the parser) will give the input xref filename for that file. The default is './%s-xref'.</para></listitem>
    </varlistentry><varlistentry>
      <term>xref_file</term><listitem><para>A string with the filename of the output xref file. The default is 'compiled.xref'</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML.FilePages </para></listitem>
  </itemizedlist>
</section><section>
  <title>Class Base::Formatter</title><para>Contains nested classes for the different Formatter modules.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>modules</term><listitem><para>a dictionary mapping names to config objects. This dictionary may be used to select an object from a command line option. </para></listitem>
    </varlistentry>
  </variablelist>
</section><section>
  <title>Formatter class HTML</title><para>Config object for HTML Formatter.
              This is the most complicated config object, because the HTML
              formatter is itself very modular and flexible, allowing the user
              to customise output at many levels. All this flexibility comes at
              a price however - but if you read this (and send feedback to the
              Synopsis developers) then it should get easier.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>name</term><listitem><para>The name of the module, ie: 'HTML'</para></listitem>
    </varlistentry><varlistentry>
      <term>stylesheet</term><listitem><para>The filename of the stylesheet file linked to by all generated pages.</para></listitem>
    </varlistentry><varlistentry>
      <term>stylesheet_file</term><listitem><para>If this attribute is set, then it specifies a file which is read and written over the stylesheet file in the output directory. It is only copied if it has a newer timestamp than the existing stylesheet file.</para></listitem>
    </varlistentry><varlistentry>
      <term>pages</term><listitem><para>Lists the names of page modules to load and process in order. Each module generates a different type of output, and some register names to be shown as a link at the top of every page. For example, ScopePages generates the pages for Classes, Modules, etc. ModuleIndexer creates the index pages for all the modules that usually go in the bottom-left frame. FramesIndex creates the index.html with the frames. The default is ['ScopePages', 'ModuleListingJS', 'ModuleIndexer', 'FileTreeJS', 'InheritanceTree', 'InheritanceGraph', 'NameIndex', 'FramesIndex']</para></listitem>
    </varlistentry><varlistentry>
      <term>comment_formatters</term><listitem><para>Lists the formatters to be applied to all comments. The default is ['summary', 'javadoc', 'section']. The summary formatter splits comments into 'summary' and 'detail' sections by looking for the first sentence. Javadoc formats javadoc-style @tags. Section splits blank lines into paragraph breaks. The quotehtml formatter quotes any html characters such as angle brackets and ampersands, such as comments that mention C++ templates. This also has the effect of disabling any HTML in the comments, and so is off by default.</para></listitem>
    </varlistentry><varlistentry>
      <term>sorter</term><listitem><para>Specifies the Sorter to be used to sort declarations on Scope Pages. You may set this to override the default sorting, for example using ('Synopsis.Formatter.HTML.doxygen', 'DOScopeSorter')</para></listitem>
    </varlistentry><varlistentry>
      <term>structs_as_classes</term><listitem><para>A boolean value which if set causes structs to be listed as classes in the output. The default is 0 (false).</para></listitem>
    </varlistentry><varlistentry>
      <term>tree_formatter</term><listitem><para>Specifies which tree formatter to use. There is a default package of 'Synopsis.Formatter.HTML' and the default value is 'TreeFormatter.TreeFormatter'</para></listitem>
    </varlistentry><varlistentry>
      <term>file_layout</term><listitem><para>Specifies the file layout to use. This must be a class that implements the FileLayout interface defined in the HTML.FileLayout module.</para></listitem>
    </varlistentry><varlistentry>
      <term>output_dir</term><listitem><para>Specifies the base output directory for generated files. May be an absolute or relative path, but absolute will probably work better in larger projects with TOC references. If this option is not set, the -o argument must be used when running Synopsis. Simple example: 'output/html'</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML The HTML Formatter</para></listitem><listitem><para>Synopsis.Formatter.HTML.core The main HTML module </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML::FilePages</title><para>This is the config object for the FilePages module.
                  FilePages creates html pages that contain the actual source
                  code for the program, which depending on the language may be
                  highlighted and hyperlinked. Currently only the C++ parser
                  provides this - other languages are displayed without
                  formatting.
                  
                  The formatting information is stored in a '.links'
                  file for each input file, and since the location is specific
                  to your project you must set this here, and FilePages is not
                  in the default list of Page modules to use.
  </para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>file_path</term><listitem><para>A string with one %s, which when replaced with the 'filename()' attribute (ie: filename with the basepath stripped from it by the parser) will give the input filename. The default is './%s'.</para></listitem>
    </varlistentry><varlistentry>
      <term>links_path</term><listitem><para>is the same as file_path, but must give the 'links' file. The default is './%s-links'</para></listitem>
    </varlistentry><varlistentry>
      <term>toc_files</term><listitem><para>is a list of '.toc' files to load and use to link references from the file.</para></listitem>
    </varlistentry><varlistentry>
      <term>scope</term><listitem><para>is the base scope to prepend to all names for looking up in the TOC. Eg: the RefManual for Synopsis maps all C++ things to Synopsis::Parser::C++::, so that string must be set here and prepended to all names to look up in the TOC.</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML.FilePages </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML::FileTree</title><para>Config object for the FileTree module.
                  FileTree creates a page with a tree of filenames, for use in
                  the top-left frame.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>link_to_pages</term><listitem><para>If true, then links are generated to the hyperlinked source files.</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML.FileTree </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML::ScopePages</title><para>Config for ScopePages module. ScopePages is the module that
                  creates the bulk of the documentation - the pages for modules
                  and classes, with summary and detail sections for each type of
                  ast node. ScopePages is very modular, and all the modules it
                  uses are in the ASTFormatter and FormatStrategy modules, which
                  is where it looks if you use the 'simple' module spec.
                  (FIXME)
  </para>
  <itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML.ScopePages</para></listitem><listitem><para>Synopsis.Formatter.HTML.ASTFormatter </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML::InheritanceGraph</title><para>Config for InheritanceGraph module.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>min_size</term><listitem><para>Minimum size of graphs to be included in output. The default setting is 1, which means all classes will be included. A setting of three means that only hierarchies consisting of three or more classes will be included.</para></listitem>
    </varlistentry><varlistentry>
      <term>min_group_size</term><listitem><para>Minimum grouping size of graphs. The graph is split into subgraphs because graphviz can makes graphs tens of thousands of pixels wide otherwise. The time to process the graphs is proportional to the number of times graphviz is run, so setting this attribute will attempt to group smaller graphs into larger graphs with a minimum number of nodes. The default is 5.</para></listitem>
    </varlistentry><varlistentry>
      <term>direction</term><listitem><para>Can be either 'horizontal' or 'vertical'. Specified the direction of inheritance in the inheritance graphs. The default is 'vertical'.</para></listitem>
    </varlistentry>
  </variablelist><itemizedlist>
    <title>See also:</title><listitem><para>Synopsis.Formatter.HTML.InheritanceGraph.InheritanceGraph </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML::ModuleListing</title><para>Config for ModuleListing module.</para>
  <variablelist>
    <title>Attributes:</title><varlistentry>
      <term>child_types</term><listitem><para>The types of children to include in the module listing. Children are found by looking for Module AST nodes, but their (string) type may depend on other factors (eg: Python creates Package and Module types). The default is to just print all Module AST nodes. </para></listitem>
    </varlistentry>
  </variablelist>
</section><section>
  <title>Formatter class HTML_Doxygen</title><para>Inherits Base::Formatter::HTML</para><para>Doxygen-style HTML. This Config class actually derives from
              the HTML class but overrides a few options to provide an output
              that looks more like Doxygen's output. You may use this via
              something like:
                  <programlisting>synopsis -Wcformatter=HTML_Doxygen</programlisting></para>
  <itemizedlist>
    <title>See also:</title><listitem><para>HTML The parent HTML config </para></listitem>
  </itemizedlist>
</section><section>
  <title>Formatter class HTML_Doxygen::ScopePages</title><para>Overrides the default ScopePages with doxygen modules.</para>
  
</section><section>
  <title>Formatter class DocBook</title><para></para>
  
</section><section>
  <title>Formatter class TexInfo</title><para></para>
  
</section><section>
  <title>Formatter class Dot</title><para></para>
  
</section><section>
  <title>Formatter class HTML_Simple</title><para></para>
  
</section><section>
  <title>Formatter class ASCII</title><para></para>
  
</section><section>
  <title>Formatter class DUMP</title><para></para>
  
</section><section>
  <title>Formatter class Dia</title><para></para>
  
</section>