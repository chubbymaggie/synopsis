#!/usr/bin/env python
#
# $Id: synopsis,v 1.2 2000/03/07 05:27:18 stefan Exp $
#
# This file is a part of Synopsis.
# Copyright (C) 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
#
#  Synopsis is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
#  02111-1307, USA.

import sys, getopt, os, os.path, string
import pickle

def version(): print "synopsis version 0.1"
cmdname = os.path.basename(sys.argv[0])
def usage():
    print "\nUsage:", cmdname, "[flags] -p<parser> -f<formatter> files"
    print """
The supported flags are:

  -p <parser>          Select a parser
  -Wp <arg>[,<arg>...] Send args to the parser
  -f <formatter>       Select a formatter
  -Wf <arg>[,<arg>...] Send args to the formatter
  -o <file>            Write output <file>
  -v                   Print version info then exit
  -h                   Print this usage message and exit"""

parser_cmd = ""
parser_args = []
formatter_cmd = ""
formatter_args = []
output = ""

def parseArgs(args):
    global parser_cmd, parser_args, formatter_cmd, formatter_args, output
    try:
        opts,files = getopt.getopt(args, "p:f:W:o:vh")
    except getopt.error, e:
        sys.stderr.write("Error in arguments: " + e + "\n")
        sys.stderr.write("Use " + cmdname + " -h for help\n")
        sys.exit(1)

    for opt in opts:
        o,a = opt

        if o == "-p":
            parser_cmd = a

        if o == "-f":
            formatter_cmd = a

        if o == "-W":
            if a[0] == "p":
                parser_args.extend(string.split(a[1:], ","))
            elif a[0] == "f":
                formatter_args.extend(string.split(a[1:], ","))
            else:
                sys.stderr.write("Error in arguments: option " + o + " not recognized\n")
                sys.stderr.write("Use " + cmdname + " -h for help\n")
                sys.exit(1)

        elif o == "-o":
            output = a

        elif o == "-v":
            version()
            sys.exit(0)

        elif o == "-h" or o == "-h":
            usage()
            sys.exit(0)

    return files

def my_import(name):
    mod = __import__(name)
    components = string.split(name, ".")
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod

def main(argv=None):
    global parser_cmd, parser_args, formatter_cmd, formatter_args

    if argv is None: argv = sys.argv

    #
    # parse command line arguments
    #
    files = parseArgs(argv[1:])
    if len(files) == 0:
        sys.stderr.write(cmdname + ": No files specified\n")
        sys.exit(1)

    dictionary = []
    if parser_cmd != "":
        try:
            parser = my_import("Parser." + parser_cmd)
        except ImportError:
            sys.stderr.write(cmdname + ": Could not import parser `" + parser_cmd + "'\n")
            sys.exit(1)

    #
    # read files, either from picled data base or from parser
    #
    for file in files:
        if file != "-" and not os.path.isfile(file):
            sys.stderr.write(cmdname + ": `" + file + "' does not exist\n")
            sys.exit(1)

        if parser_cmd == "":
            unpickler = pickle.Unpickler(open(file, "r"))
            x = unpickler.load()
            dictionary.append(x)

        else:
            dictionary.extend(parser.parse(file, parser_args))

    #
    # resolve symbols here...
    #

    #
    # generate output, either with picler or with a formatter
    #
    if formatter_cmd == "":
        pickler = pickle.Pickler(open(output, "w"))
        for x in dictionary: pickler.dump(x)

    else:
        try:
            formatter = my_import("Formatter." + formatter_cmd)
        except ImportError:
            sys.stderr.write(cmdname + ": Could not import formatter `" + formatter_cmd + "'\n")
            sys.exit(1)

        formatter.format(dictionary, formatter_args)

if __name__ == '__main__':
        main()

