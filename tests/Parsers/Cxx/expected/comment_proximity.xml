<?xml version='1.0' encoding='ISO-8859-1'?>
<ast>
 <declarations>
  <instance accessibility="0" class="Synopsis.AST.Variable" constr="0" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="3" name="test1" type="global variable">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="1">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      // Comment at start

     </text>
    </instance>
   </comments>
   <vtype>
    <instance class="Synopsis.Type.Base" language="C++" name="int"/>
   </vtype>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Variable" constr="0" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="7" name="test2" type="global variable">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      // Test2: This should have a comment, unlike test1
// It should also have two lines

     </text>
    </instance>
   </comments>
   <vtype/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Variable" constr="0" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="12" name="test3" type="global variable">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="1">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      /* A comment by itself
 * Over multiple lines. */

     </text>
    </instance>
   </comments>
   <vtype/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Variable" constr="0" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="18" name="test4" type="global variable">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="1">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      /* This comment should be ignored.
 */

     </text>
    </instance>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      /* Test4: Should have a comment
 * */

     </text>
    </instance>
   </comments>
   <vtype/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Variable" constr="0" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="23" name="test5" type="global variable">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      /* Test5: This should have a comment, unlike test 3
 * Which had a gap.
 */

     </text>
    </instance>
   </comments>
   <vtype/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Builtin" file="Parsers/Cxx/input/comment_proximity.cc" language="C++" line="24" name="EOS" type="EOS">
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="1">
     <file>
      Parsers/Cxx/input/comment_proximity.cc
     </file>
     <text>
      //&lt; This should still be tail-appended!

     </text>
    </instance>
   </comments>
  </instance>
 </declarations>
 <types>
  <instance class="Synopsis.Type.Declared" language="C++" name="EOS">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="test1">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="test2">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="test3">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="test4">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="test5">
   <declaration/>
  </instance>
 </types>
 <files>
  <file>
   Parsers/Cxx/input/comment_proximity.cc
  </file>
 </files>
</ast>
