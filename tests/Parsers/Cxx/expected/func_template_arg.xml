<?xml version='1.0' encoding='ISO-8859-1'?>
<?xml-stylesheet href='/home/stefan/synopsis/Synopsis/share/Synopsis/dump.css' type='text/css'?>
<ast>
 <declarations>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="4" name="function" type="struct">
   <template>
    <instance class="Synopsis.Type.Template" language="C++" name="function">
     <declaration/>
     <parameters>
      <instance class="Synopsis.AST.Parameter" identifier="" value="">
       <premodifier>
        class
       </premodifier>
       <type>
        <instance class="Synopsis.Type.Dependent" language="C++" name="Foo"/>
       </type>
      </instance>
     </parameters>
    </instance>
   </template>
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="1">
     <file>
      Parsers/Cxx/input/func_template_arg.cc
     </file>
     <text>
      // Test function pointers as template arguments

     </text>
    </instance>
   </comments>
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Declaration" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="1" name="dummy" type="dummy"/>
   </declarations>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="9" name="function&lt;void()(A1,A2)&gt;" type="struct">
   <template>
    <instance class="Synopsis.Type.Template" language="C++" name="function&lt;void()(A1,A2)&gt;">
     <declaration/>
     <parameters>
      <instance class="Synopsis.AST.Parameter" identifier="" value="">
       <premodifier>
        class
       </premodifier>
       <type>
        <instance class="Synopsis.Type.Dependent" language="C++" name="A1"/>
       </type>
      </instance>
      <instance class="Synopsis.AST.Parameter" identifier="" value="">
       <premodifier>
        class
       </premodifier>
       <type>
        <instance class="Synopsis.Type.Dependent" language="C++" name="A2"/>
       </type>
      </instance>
     </parameters>
    </instance>
   </template>
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/func_template_arg.cc
     </file>
     <text>
      // Test template class with function argument
// (not really a template function)

     </text>
    </instance>
   </comments>
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Declaration" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="6" name="dummy" type="dummy"/>
   </declarations>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="13" name="function&lt;R()(void)&gt;" type="struct">
   <template>
    <instance class="Synopsis.Type.Template" language="C++" name="function&lt;R()(void)&gt;">
     <declaration/>
     <parameters>
      <instance class="Synopsis.AST.Parameter" identifier="" value="">
       <premodifier>
        class
       </premodifier>
       <type>
        <instance class="Synopsis.Type.Dependent" language="C++" name="R"/>
       </type>
      </instance>
     </parameters>
    </instance>
   </template>
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/func_template_arg.cc
     </file>
     <text>
      // Test return type fptr

     </text>
    </instance>
   </comments>
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Declaration" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="11" name="dummy" type="dummy"/>
   </declarations>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="17" name="function&lt;R()(int,int)&gt;" type="struct">
   <template>
    <instance class="Synopsis.Type.Template" language="C++" name="function&lt;R()(int,int)&gt;">
     <declaration/>
     <parameters>
      <instance class="Synopsis.AST.Parameter" identifier="" value="">
       <premodifier>
        class
       </premodifier>
       <type>
        <instance class="Synopsis.Type.Dependent" language="C++" name="R"/>
       </type>
      </instance>
     </parameters>
    </instance>
   </template>
   <comments>
    <instance class="Synopsis.AST.Comment" line="0" suspect="0">
     <file>
      Parsers/Cxx/input/func_template_arg.cc
     </file>
     <text>
      // Test return type fptr

     </text>
    </instance>
   </comments>
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Declaration" file="Parsers/Cxx/input/func_template_arg.cc" language="C++" line="15" name="dummy" type="dummy"/>
   </declarations>
  </instance>
 </declarations>
 <types>
  <instance class="Synopsis.Type.Declared" language="C++" name="dummy">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="function">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="function&lt;R()(int,int)&gt;">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="function&lt;R()(void)&gt;">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="function&lt;void()(A1,A2)&gt;">
   <declaration/>
  </instance>
 </types>
 <files>
  <file>
   Parsers/Cxx/input/func_template_arg.cc
  </file>
 </files>
</ast>
