<?xml version='1.0' encoding='ISO-8859-1'?>
<ast>
 <declarations>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/operator.cc" language="C++" line="1" name="A" type="struct">
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Builtin" file="Parsers/Cxx/input/operator.cc" language="C++" line="1" name="EOS" type="EOS"/>
   </declarations>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Class" file="Parsers/Cxx/input/operator.cc" language="C++" line="2" name="B" type="struct">
   <declarations>
    <instance accessibility="1" class="Synopsis.AST.Builtin" file="Parsers/Cxx/input/operator.cc" language="C++" line="2" name="EOS" type="EOS"/>
   </declarations>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="3" name="operator+(const B&amp;,const B&amp;)" realname="operator+" type="function">
   <parameters>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type>
      <instance class="Synopsis.Type.Modifier" language="C++">
       <alias>
        <instance class="Synopsis.Type.Declared" language="C++" name="B">
         <declaration/>
        </instance>
       </alias>
       <postmod>
        &amp;
       </postmod>
       <premod>
        const
       </premod>
      </instance>
     </type>
    </instance>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type>
      <instance class="Synopsis.Type.Modifier" language="C++">
       <alias/>
       <postmod>
        &amp;
       </postmod>
       <premod>
        const
       </premod>
      </instance>
     </type>
    </instance>
   </parameters>
   <returnType>
    <instance class="Synopsis.Type.Declared" language="C++" name="A">
     <declaration/>
    </instance>
   </returnType>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="4" name="operator+(const A&amp;,const A&amp;)" realname="operator+" type="function">
   <parameters>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type>
      <instance class="Synopsis.Type.Modifier" language="C++">
       <alias/>
       <postmod>
        &amp;
       </postmod>
       <premod>
        const
       </premod>
      </instance>
     </type>
    </instance>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type>
      <instance class="Synopsis.Type.Modifier" language="C++">
       <alias/>
       <postmod>
        &amp;
       </postmod>
       <premod>
        const
       </premod>
      </instance>
     </type>
    </instance>
   </parameters>
   <returnType>
    <instance class="Synopsis.Type.Base" language="C++" name="int"/>
   </returnType>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="5" name="func(A)" realname="func" type="function">
   <parameters>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type/>
    </instance>
   </parameters>
   <returnType>
    <instance class="Synopsis.Type.Base" language="C++" name="void"/>
   </returnType>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="6" name="func(B)" realname="func" type="function">
   <parameters>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type/>
    </instance>
   </parameters>
   <returnType/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="7" name="func(int)" realname="func" type="function">
   <parameters>
    <instance class="Synopsis.AST.Parameter" identifier="" value="">
     <type/>
    </instance>
   </parameters>
   <returnType/>
  </instance>
  <instance accessibility="0" class="Synopsis.AST.Function" file="Parsers/Cxx/input/operator.cc" language="C++" line="8" name="main()" realname="main" type="function">
   <returnType/>
  </instance>
 </declarations>
 <types>
  <instance class="Synopsis.Type.Declared" language="C++" name="EOS">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="func(A)">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="func(B)">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="func(int)">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="main()">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="operator+(const A&amp;,const A&amp;)">
   <declaration/>
  </instance>
  <instance class="Synopsis.Type.Declared" language="C++" name="operator+(const B&amp;,const B&amp;)">
   <declaration/>
  </instance>
 </types>
 <files>
  <instance class="Synopsis.AST.SourceFile" filename="Parsers/Cxx/input/operator.cc" is_main="1" language="C++">
   <declarations/>
   <macro_calls/>
  </instance>
 </files>
</ast>
